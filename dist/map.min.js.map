{"version":3,"sources":["bootstrap.js","util.js","i18n.const.js","params.const.js","type.const.js","googleMaps.js","marker.js","track.js","kml.js","i18n.js","chart.js","map.js","storage.js","loader.js","api.js","init.js"],"names":["fruskac","prototype","Util","getParameterByName","name","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","getParameterPartsByName","value","this","split","I18N","LANGUAGES","SOURCE","DISTANCE","en","rs","ELEVATION","PARAMETER","FOCUS","COORDINATES","TRACK","LAYERS","TYPE","MARKER","KML","google","maps","Polyline","getBounds","bounds","LatLngBounds","getPath","forEach","item","extend","LatLng","lat","lng","Marker","options","_","map","gmap","icon","hasOwnProperty","MarkerImage","Size","width","height","Point","x","y","marker","event","addListener","showInfoWindow","getInfoWindowContent","data","html","title","description","image","link","Track","geodesic","strokeColor","strokeOpacity","strokeWeight","Kml","preserveViewport","suppressInfoWindows","type","KmlLayer","I18n","lang","Object","keys","key","add","id","values","source","translate","Chart","container","self","visible","getPathElevation","points","elevator","callback","gpath","point","push","getElevationAlongPath","path","samples","length","elevations","distance","rows","e","index","distanceFromPrevious","getDistance","parseFloat","elevation","p1","p2","dLat","rad","dLong","a","Math","sin","cos","atan2","sqrt","toFixed","PI","setVisible","$","addClass","removeClass","center","getCenter","trigger","setCenter","show","isFixedLayout","find","remove","ElevationService","charts","load","packages","language","setOnLoadCallback","visualization","DataTable","addColumn","i18n","addRows","lineWidth","areaOpacity","series","color","visibleInLegend","focusTarget","hAxis","baselineColor","gridlines","vAxis","minValue","legend","position","chart","AreaChart","document","getElementById","draw","events","coords","placeMarker","getAt","row","on","closeChart","Map","infoWindow","InfoWindow","content","isCrossDomain","frameElement","hasAttribute","getType","object","Promise","resolve","addMarker","then","addTrack","track","addKml","kml","icon_data","clusterer","get","response","each","i","v","Number","attr","lon","p","setMap","removeMarker","focus","setZoom","panTo","setAnimation","Animation","BOUNCE","fitBounds","animateTo","duration","setContent","open","fullscreen","params","c","getZoom","l","util","f","t","encodeURIComponent","join","Storage","getParentSelector","selector","parseSelector","hasParentSelector","selectorParts","splice","indexOf","isArray","getSelectorsForContainer","items","children","itemSelector","getVisible","storage","getState","setState","select","subChildren","root","query","child","parentSelector","parent","getSelectors","Loader","success","promises","tag","all","apply","append","Api","ready","getData","clustering","undefined","enabled","setMaxZoom","setGridSize","resetViewport","redraw","getMapTypeId","setMapTypeId","top","referrer","domain","test","documentElement","mapConfig","zoom","mapTypeId","MapTypeId","TERRAIN","mapTypeControl","zoomControlOptions","ControlPosition","LEFT_BOTTOM","streetViewControlOptions","parts","overlayImageBounds","north","south","east","west","overlayOptions","opacity","clickable","GroundOverlay","MarkerClusterer","maxZoom","gridSize","styles","textColor","backgroundPosition","layers","activeLayers","layersFromUrl","layer","loader","addListenerOnce"],"mappings":"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","file":"map.min.js","sourcesContent":["'use strict';\n\nfunction fruskac() {}\nfruskac.prototype = fruskac;\n","'use strict';\n\nfruskac.Util = (function () {\n\n    function Util() {}\n\n    Util.prototype = {\n        getParameterByName: function (name, url) {\n            if (!url) {\n                url = window.location.href;\n            }\n            name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n            var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n                results = regex.exec(url);\n            if (!results) return null;\n            if (!results[2]) return '';\n            return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n        },\n\n        getParameterPartsByName: function (name) {\n            var value = this.getParameterByName(name);\n            if (!value) {\n                return;\n            }\n            return value.split(',');\n        }\n\n    };\n\n    return Util;\n\n})();","'use strict';\n\nfruskac.I18N = {\n    LANGUAGES: [\n        'en',\n        'rs'\n    ],\n    SOURCE: {\n        DISTANCE: [\n            { en: 'Distance' },\n            { rs: 'Udaljenost' }\n        ],\n        ELEVATION: [\n            { en: 'Elevation' },\n            { rs: 'Visina' }\n        ]\n    }\n\n};\n\n","'use strict';\n\nfruskac.PARAMETER = {\n    FOCUS: 'f',\n    COORDINATES: 'c',\n    TRACK: 't',\n    LAYERS: 'l'\n};","'use strict';\n\nfruskac.TYPE = {\n    MARKER: 'marker',\n    TRACK: 'track',\n    KML: 'kml'\n};","'use strict';\n\n(function (google) {\n\n    /**\n     * Extend google.maps.Polyline to get bounds based on path\n     *\n     * @returns {google.maps.LatLngBounds}\n     */\n    google.maps.Polyline.prototype.getBounds = function () {\n        var bounds = new google.maps.LatLngBounds();\n        this.getPath().forEach(function (item) {\n            bounds.extend(new google.maps.LatLng(item.lat(), item.lng()));\n        });\n        return bounds;\n    };\n\n\n})(google);","'use strict';\n\nfruskac.Marker = (function () {\n\n    /**\n     * @global\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Marker(options) {\n\n        options = _.extend({\n            map: gmap\n        }, options);\n\n        if (options.icon && options.icon.hasOwnProperty('url')) {\n            options.icon = new google.maps.MarkerImage(\n                options.icon.url,\n                new google.maps.Size(options.icon.width, options.icon.height),\n                new google.maps.Point(options.icon.x, options.icon.y)\n            )\n        }\n\n        return (function () {\n\n            var marker = new google.maps.Marker(options);\n\n            google.maps.event.addListener(marker, 'click', function () {\n                map.showInfoWindow(getInfoWindowContent(options.data), this);\n            });\n\n            return marker;\n\n        })();\n    }\n\n    /**\n     * Creates HTML that will be presented on InfoWindow\n     *\n     * @param {Object} data\n     * @returns {string}\n     */\n    function getInfoWindowContent(data) {\n        var html = '<h1>' + data.title + '</h1>';\n        if (data.description) {\n            html += '<p>' + data.description + '</p>';\n        }\n        if (data.image) {\n            html += '<img src=\"' + data.image + '\">';\n        }\n        if (data.link) {\n            html += '<a href=\"' + data.link + '\" target=\"_blank\">' + data.link + '</a>';\n        }\n        return html;\n    }\n\n    return Marker;\n\n})();\n","'use strict';\n\nfruskac.Track = (function () {\n\n    /**\n     * Track\n     * @global\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Track(options) {\n\n        options = _.extend({\n            map: gmap,\n            geodesic: true,\n            strokeColor: 'rgb(51, 102, 204)',\n            strokeOpacity: 1.0,\n            strokeWeight: 4\n        }, options);\n\n        return (function () {\n            return new google.maps.Polyline(options)\n        })();\n    }\n\n    return Track;\n\n})();","'use strict';\n\nfruskac.Kml = (function () {\n\n    /**\n     * KML\n     * @global\n     * @param {string} url\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Kml(url, options) {\n\n        options = _.extend({\n            map: gmap,\n            preserveViewport: true,\n            suppressInfoWindows: true,\n            data: {\n                type: 'kml'\n            }\n        }, options);\n\n        return (function () {\n            return new google.maps.KmlLayer(url, options)\n        })();\n    }\n\n    return Kml;\n\n})();","'use strict';\n\nfruskac.I18n = (function () {\n\n    var source = {};\n\n    function I18n(lang) {\n        this.lang = lang;\n        Object.keys(fruskac.I18N.SOURCE).forEach(function (key) {\n            add(key, fruskac.I18N.SOURCE[key])\n        })\n    }\n\n    I18n.prototype = {\n        translate: function (id) {\n            return source[this.lang] && source[this.lang][id] || '__TRANSLATION_MISSING__';\n        }\n    };\n\n    function add(id, values) {\n        values.forEach(function (value) {\n            fruskac.I18N.LANGUAGES.forEach(function (lang) {\n                if (value[lang]) {\n                    if (!source[lang]) {\n                        source[lang] = {};\n                    }\n                    source[lang][id] = value[lang];\n                }\n            })\n        });\n    }\n\n    return I18n;\n\n})();","'use strict';\n\nfruskac.Chart = (function () {\n\n    /**\n     * @global\n     * @param {HTMLDomElement} container\n     * @constructor\n     */\n    function Chart(container) {\n        var self = this;\n        self.visible = false;\n        self.container = container;\n    }\n\n    /**\n     * @global\n     */\n    Chart.prototype = {\n\n        /**\n         * Set chart container visibility\n         *\n         * @param {boolean} value\n         */\n        setVisible: function (value) {\n\n            var self = this;\n\n            self.visible = value;\n\n            var className = 'on';\n\n            if (self.visible) {\n                $(self.container).addClass(className);\n            } else {\n                $(self.container).removeClass(className);\n            }\n\n            var center = gmap.getCenter();\n            google.maps.event.trigger(gmap, \"resize\");\n            gmap.setCenter(center);\n\n        },\n\n        /**\n         * Show chart\n         *\n         * @param {Array} points\n         */\n        show: function (points, isFixedLayout) {\n\n            var self = this;\n\n            self.setVisible(true);\n\n            if (isFixedLayout) {\n                $(self.container).find('button').remove();\n            }\n\n            var elevator = new google.maps.ElevationService;\n\n            // Load the Visualization API and the corechart package.\n            google.charts.load('current', {\n                packages: ['corechart'],\n                language: fruskac.lang\n            });\n\n            // Set a callback to run when the Google Visualization API is loaded.\n            google.charts.setOnLoadCallback(function () {\n                getPathElevation(points, elevator, function (rows) {\n\n                    // Create the data table.\n                    var data = new google.visualization.DataTable();\n                    data.addColumn('number', i18n.translate('DISTANCE'));\n                    data.addColumn('number', i18n.translate('ELEVATION'));\n                    data.addRows(rows);\n\n                    // Set chart options\n                    var options = {\n                        lineWidth: 2,\n                        areaOpacity: 0.2,\n                        series: [\n                            {color: 'black', visibleInLegend: false}, {}, {},\n                        ],\n                        focusTarget: 'category',\n                        hAxis: {\n                            baselineColor:'transparent',\n                            title: i18n.translate('DISTANCE') + ' (km)',\n                            gridlines: {\n                                color: 'transparent'\n                            },\n                        },\n                        vAxis: {\n                            baselineColor:'transparent',\n                            title: i18n.translate('ELEVATION') + ' (m)',\n                            minValue: 0,\n                            gridlines: {\n                                color: 'transparent'\n                            },\n                        },\n                        legend: {\n                            position: \"none\"\n                        }\n                    };\n\n                    // Instantiate and draw our chart, passing in some options.\n                    var chart = new google.visualization.AreaChart(document.getElementById('chart'));\n                    chart.draw(data, options);\n\n                    google.visualization.events.addListener(chart, 'onmouseover', function (coords) {\n                        map.placeMarker(points.getAt(coords.row))\n                    });\n\n                    $(window).on('resize', function () {\n                        chart.draw(data, options);\n                    });\n\n                });\n            });\n\n        }\n    };\n\n\n    /**\n     *\n     * @param {Object[]} points\n     * @param {google.maps.ElevationService} elevator\n     * @param {Function} callback\n     */\n    function getPathElevation(points, elevator, callback) {\n\n        var gpath = [];\n        points.forEach(function (point) {\n            gpath.push(point)\n        });\n\n        // Create a PathElevationRequest object using this array.\n        elevator.getElevationAlongPath({\n            'path': gpath,\n            'samples': gpath.length\n        }, function (elevations) {\n            var distance = 0;\n            var rows = [];\n            elevations.forEach(function (e, index) {\n                var distanceFromPrevious;\n                if (index) {\n                    distanceFromPrevious = getDistance(elevations[index].location, elevations[index - 1].location)\n                } else {\n                    distanceFromPrevious = 0;\n                }\n                distance += parseFloat(distanceFromPrevious);\n                rows.push([distance, e.elevation]);\n            });\n            callback(rows);\n        });\n    }\n\n    /**\n     * calculates distance between two points in km's\n     *\n     * @param {google.maps.LatLng} p1\n     * @param {google.maps.LatLng} p2\n     * @returns {string}\n     */\n    function getDistance(p1, p2) {\n        var R = 6378137; // Earth’s mean radius in meter\n        var dLat = rad(p2.lat() - p1.lat());\n        var dLong = rad(p2.lng() - p1.lng());\n        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *\n            Math.sin(dLong / 2) * Math.sin(dLong / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var d = R * c;\n        return (d / 1000).toFixed(2); // \"d\" returns the distance in meter\n        //return (google.maps.geometry.spherical.computeDistanceBetween(p1, p2) / 1000).toFixed(2);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    function rad(x) {\n        return x * Math.PI / 180;\n    }\n\n    window.closeChart = function () {\n        chart.setVisible(false);\n    };\n\n    return Chart;\n\n})();","'use strict';\n\nfruskac.Map = (function () {\n\n    /**\n     * Map\n     * @global\n     * @param {google.maps.Map} map\n     * @constructor\n     */\n    function Map(map) {\n\n        this.infoWindow = new google.maps.InfoWindow({\n            content: \"holding...\"\n        });\n\n        // show fullscreen button if CrossDomain or if \"allowfullscreen\" attribute added to iframe\n        if (fruskac.isCrossDomain || window.frameElement && window.frameElement.hasAttribute('allowFullScreen')) {\n            $('#map_container > button').show();\n        }\n\n    }\n\n    /**\n     * @global\n     */\n    Map.prototype = {\n\n        /**\n         * Add object to map\n         * @param {Object} data\n         * @param {string} type\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        add: function (data, type, visible) {\n\n            var self = this;\n\n            return new Promise(function (resolve) {\n                switch (type) {\n                    case fruskac.TYPE.MARKER:\n                        return self.addMarker(data, visible).then(function (marker) {\n                            resolve(marker);\n                        });\n                        break;\n                    case fruskac.TYPE.TRACK:\n                        return self.addTrack(data, visible).then(function (track) {\n                            resolve(track);\n                        });\n                        break;\n                    case fruskac.TYPE.KML:\n                        return self.addKml(data, visible).then(function (kml) {\n                            resolve(kml);\n                        });\n                        break;\n                }\n            });\n\n        },\n\n        /**\n         * Add marker to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addMarker: function (data, visible) {\n\n            return new Promise(function (resolve) {\n\n                var marker = new fruskac.Marker({\n                    position: new google.maps.LatLng(data.lat, data.lng),\n                    title: data.data.title,\n                    icon: data.options.icon_data,\n                    data: data.data\n                });\n\n                marker.setVisible(visible);\n\n                if (visible) {\n                    clusterer.addMarker(marker);\n                }\n\n                resolve(marker);\n\n            })\n\n        },\n\n        /**\n         * Add track to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addTrack: function (data, visible) {\n\n            var url;\n\n            if (typeof data === 'string') {\n                url = data;\n            } else {\n                url = '../' + data.url;\n            }\n\n            return new Promise(function (resolve) {\n\n                return $.get(url).then(function (response) {\n                    var points = [];\n                    $(response).find('trkpt').each(function (i, v) {\n                        var lat = Number($(this).attr('lat'));\n                        var lon = Number($(this).attr('lon'));\n                        var p = new google.maps.LatLng(lat, lon);\n                        points.push(p);\n                    });\n\n                    var track = new fruskac.Track({\n                        path: points\n                    });\n\n                    track.setVisible(visible);\n\n                    resolve(track);\n\n                });\n\n            });\n\n        },\n\n        /**\n         * Add KML layer to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addKml: function (data, visible) {\n\n            return new Promise(function (resolve) {\n\n                var kml = new fruskac.Kml(data.url);\n\n                if (!visible) {\n                    kml.setMap(null);\n                }\n\n                resolve(kml);\n\n            })\n\n        },\n\n        /**\n         * Set visibility on object\n         * @param {Object} object\n         * @param {boolean} value\n         */\n        setVisible: function (object, value) {\n            switch (getType(object)) {\n                case fruskac.TYPE.MARKER:\n                    object.setVisible(value);\n                    if (value) {\n                        clusterer.addMarker(object);\n                    } else {\n                        clusterer.removeMarker(object);\n                    }\n                    break;\n                case fruskac.TYPE.TRACK:\n                    object.setVisible(value);\n                    break;\n                case fruskac.TYPE.KML:\n                    object.setMap(value ? gmap : null);\n                    break;\n            }\n        },\n\n        /**\n         * Focus one object on map, fit bounds\n         * @param {Object} object\n         */\n        focus: function (object, isFixedLayout) {\n            switch (getType(object)) {\n                case fruskac.TYPE.MARKER:\n                    gmap.setZoom(14);\n                    gmap.panTo(object.position);\n                    object.setAnimation(google.maps.Animation.BOUNCE);\n                    // TODO: show info window\n                    //map.showInfoWindow(getInfoWindowContent(options.data), this);\n                    break;\n                case fruskac.TYPE.TRACK:\n                    gmap.fitBounds(object.getBounds());\n                    chart.show(object.getPath(), isFixedLayout);\n                    break;\n            }\n        },\n\n        /**\n         * Place marker on map\n         * @param {google.maps.LatLng} point\n         */\n        placeMarker: function (point) {\n\n            var self = this;\n\n            if (!self.marker) {\n                self.marker = new fruskac.Marker({\n                    position: point\n                });\n            } else {\n                self.marker.animateTo(point, {\n                    duration: 50\n                });\n            }\n        },\n\n        /**\n         * Show info window for Marker\n         * @param {string} html\n         * @param {google.maps.Marker} marker\n         */\n        showInfoWindow: function (html, marker) {\n\n            var self = this;\n\n            self.infoWindow.setContent(html);\n            self.infoWindow.open(gmap, marker);\n\n        },\n\n        fullscreen: function () {\n\n            var params = {\n                c: gmap.getCenter().lat() + ',' + gmap.getCenter().lng() + ',' + gmap.getZoom(),\n                l: util.getParameterByName(fruskac.PARAMETER.LAYERS),\n                f: util.getParameterByName(fruskac.PARAMETER.FOCUS),\n                t: util.getParameterByName(fruskac.PARAMETER.TRACK),\n                lang: fruskac.lang\n            };\n\n            var url = '/fruskac/map/examples/angularjs.html#!?' + Object.keys(params).map(function(i) {\n                    return params[i] && encodeURIComponent(i) + \"=\" + encodeURIComponent(params[i]);\n                }).join('&');\n\n            // TODO: update location when published\n            window.open(url, '_blank');\n        }\n    };\n\n    function getType(object) {\n        if (!object) {\n            return;\n        }\n        if (object.hasOwnProperty('position')) {//marker\n            return fruskac.TYPE.MARKER;\n        } else if (object.hasOwnProperty('strokeColor')) {\n            return fruskac.TYPE.TRACK;\n        } else if (object.hasOwnProperty('suppressInfoWindows')) {\n            return fruskac.TYPE.KML;\n        }\n    }\n\n    window.fullscreen = function () {\n        map.fullscreen()\n    };\n\n    return Map;\n\n})();","'use strict';\n\nfruskac.Storage = (function () {\n    /**\n     * @global\n     * @param {Array} Initial data array\n     * @constructor\n     */\n    function Storage(data) {\n        if (!data) {\n            data = [];\n        }\n        this.data = data;\n    }\n\n    /**\n     * @global\n     */\n    Storage.prototype = {\n\n        /**\n         * Add object to storage\n         * @param {Object} value\n         * @param {Array|string} selector\n         * @param {string} type\n         * @param {boolean} visible\n         * @returns {*}\n         */\n        add: function (value, selector, type, visible) {\n\n            var self = this;\n\n            selector = parseSelector(selector);\n\n            var container;\n\n            if (selector) {\n                var object = self.get(selector);\n                if (object) {\n                    if (!object.children) {\n                        object.children = [];\n                    }\n                    container = object.children;\n                }\n            } else {\n                container = self.data;\n            }\n\n            if (type) {\n                object.type = type;\n                return map.add(value, type, visible).then(function (object) {\n                    container.push(object);\n                });\n            } else {\n                return new Promise(function (resolve) {\n                    container.push(value);\n                    resolve(value);\n                })\n            }\n\n        },\n\n        /**\n         * Gets root data array\n         * @returns {*}\n         */\n        root: function () {\n            return this.data;\n        },\n\n        /**\n         * Gets object based on selector and container\n         * @param {Array|string} selector\n         * @param {Array} container\n         * @returns {*}\n         */\n        get: function (selector, container) {\n\n            selector = parseSelector(selector);\n\n            if (!container) {\n                container = this.data;\n            }\n\n            if (!selector) {\n                return;\n            }\n\n            if (selector.indexOf(':') !== -1) {\n                var selectorParts = selector.split(':');\n                var container = _.find(container, {id: selectorParts[0]}).children;\n                selectorParts = selectorParts.splice(1);\n                return this.get(selectorParts.join(':'), container);\n            }\n\n            return _.find(container, function (object) {\n                if (object && object.id === selector || (object.hasOwnProperty('data') && object.data.id == selector)) {\n                    return object;\n                }\n            });\n\n        },\n\n        /**\n         * Gets children based on selector and container\n         * @param {Array|string} selector\n         * @param {Array} container\n         * @returns {*|Array|HTMLElement[]}\n         */\n        query: function (selector, container) {\n\n            selector = parseSelector(selector);\n\n            if (!container) {\n                container = this.data;\n            }\n\n            var object = this.get(selector, container);\n\n            return object.children;\n\n        },\n\n        /**\n         * Set state (on/off)\n         * @param {Array|string} selector\n         * @param {boolean} value\n         */\n        setState: function (selector, value) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            if (object) {\n                object.on = value;\n                this.setVisible(selector, value);\n            }\n\n        },\n\n        /**\n         * Get state\n         * @param {Array|string} selector\n         * @returns {*}\n         */\n        getState: function (selector) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            if (object) {\n                return object.on;\n            }\n\n        },\n\n        /**\n         * Set visibility\n         * @param {Array|string} selector\n         * @param {boolean} value\n         */\n        setVisible: function (selector, value) {\n\n            selector = parseSelector(selector);\n\n            var self = this;\n\n            var object = this.get(selector);\n\n            if (object) {\n                object.visible = value;\n\n                if (object.children) {\n                    object.children.forEach(function (child) {\n                        if (child.id) {\n                            self.setVisible([selector, child.id], value)\n                        } else {\n                            var v = value ? object.on : false;\n                            map.setVisible(child, v);\n                        }\n                    })\n                }\n            }\n\n        },\n\n\n        /**\n         * Get visibility\n         * @param {Array|string} selector\n         * @returns {boolean}\n         */\n        getVisible: function (selector) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            var visible = true;\n\n            if (object) {\n                visible = object.visible;\n\n                if (hasParentSelector(selector)) {\n                    var parentSelector = getParentSelector(selector);\n                    var parentVisible = this.getVisible(parentSelector);\n                    if (parentVisible) {\n                        if (hasParentSelector(parentSelector)) {\n                            return this.getVisible(getParentSelector(parentSelector))\n                        }\n                    } else {\n                        return false;\n                    }\n                }\n\n            }\n\n            return visible;\n\n        },\n\n        /**\n         * Focus object based on selector\n         * @param {Array|string} selector\n         */\n        focus: function (selector, isFixedLayout) {\n\n            var self = this;\n\n            selector = parseSelector(selector);\n\n            var object = self.get(selector);\n\n            if (hasParentSelector(selector)) {\n\n                var parent = self.get(getParentSelector(selector));\n\n                self.setState(parent.id, true);\n\n                parent.children.forEach(function (child) {\n                    if (child.hasOwnProperty('id')) {\n                        self.setState([parent.id, child.id], child.id === object.id);\n                    }\n                });\n\n            }\n\n            map.focus(object && object.hasOwnProperty('children') ? object.children[0] : object, isFixedLayout);\n\n        },\n\n        getSelectors: function () {\n            return getSelectorsForContainer(storage.root());\n        }\n    };\n\n    /**\n     * Get parent selector\n     * @param {Array|string} selector\n     * @returns {string}\n     */\n    function getParentSelector(selector) {\n\n        selector = parseSelector(selector);\n\n        if (!hasParentSelector(selector)) {\n            return;\n        }\n\n        var selectorParts = selector.split(':');\n        selectorParts.splice(-1);\n\n        return selectorParts.join(':');\n    }\n\n    /**\n     * Test if parent selector is available\n     * @param {Array|string} selector\n     * @returns {boolean}\n     */\n    function hasParentSelector(selector) {\n\n        selector = parseSelector(selector);\n\n        return selector.indexOf(':') !== -1;\n    }\n\n    /**\n     * Parse array (if provided) into string\n     * @param {Array|string} selector\n     * @returns {*}\n     */\n    function parseSelector(selector) {\n        if (_.isArray(selector)) {\n            selector = selector.join(':');\n        }\n\n        return selector;\n\n    }\n\n    /**\n     *\n     * @param {Array} items\n     * @param {Array|string} selector\n     * @returns {Array}\n     */\n    function getSelectorsForContainer(items, selector) {\n\n        selector = parseSelector(selector);\n\n        var children = [];\n\n        items.forEach(function (item) {\n\n            if (!item.id) {\n                return;\n            }\n\n            var itemSelector;\n            if (selector) {\n                itemSelector = parseSelector([selector, item.id]);\n            } else {\n                itemSelector = item.id\n            }\n\n            var object = {\n                id: item.id,\n                getVisible: function () {\n                    return storage.getState(itemSelector);\n                },\n                setVisible: function (value) {\n                    return storage.setState(itemSelector, value);\n                },\n                select: function () {\n                    return storage.focus(itemSelector);\n                }\n            };\n\n            if (item.type) {\n                object.type = item.type;\n            }\n\n            if (item.children && item.children.length) {\n                var subChildren = getSelectorsForContainer(item.children, itemSelector);\n                if (subChildren && subChildren.length) {\n                    object.children = subChildren;\n                }\n            }\n\n            children.push(object)\n\n        });\n\n        return children;\n\n    }\n\n\n    return Storage;\n\n})();","'use strict';\n\nfruskac.Loader = (function () {\n\n    /**\n     * Loader\n     *\n     * @global\n     * @constructor\n     */\n    function Loader() {\n    }\n\n    /**\n     * @global\n     */\n    Loader.prototype = {\n\n\n        /**\n         * Load items\n         *\n         * @param {Array} items\n         */\n        load: function (items) {\n\n            var promises = [];\n\n            items.forEach(function (item) {\n                promises.push(load.apply(this, item));\n            });\n\n            return Promise.all(promises);\n\n        },\n        \n        append: function (source, type) {\n            return map.add(source, type, true)\n        }\n\n    };\n\n    /**\n     * Initialize layers\n     *\n     * @param {string|Object} source\n     * @param {string} type\n     * @param {boolean} visible\n     */\n    function load(source, type, visible) {\n\n        if (typeof source === 'string') {\n            source = {\n                name: source.replace(/-\\w{2}/,''), // remove language suffix from name\n                url: '../data/' + source + '.json'\n            }\n        }\n\n        return storage.add({\n            id: source.name,\n            visible: visible,\n            on: visible\n        }).then(function () {\n            return $.get(source.url).success(function (response) { // get json array of items\n\n                var promises = [];\n\n                response.forEach(function (item) {\n                    var p, container = storage.get([source.name, item.tag]);\n\n                    if (container) {\n                        p = new Promise(function (resolve) {\n                            resolve();\n                        });\n                    } else {\n                        p = storage.add({\n                            id: item.tag,\n                            visible: visible,\n                            on: visible,\n                            type: type\n                        }, source.name);\n                    }\n\n                    p.then(function () {\n                        storage.add(item, [source.name, item.tag], type, visible);\n                    });\n\n                    promises.push(p);\n\n                });\n\n                return Promise.all(promises);\n\n            })\n        });\n    }\n\n    return Loader;\n\n})();","'use strict';\n\nfruskac.Api = (function () {\n\n    function Api(){}\n\n    Api.prototype = {\n\n        /**\n         * Fired when ready\n         * @global\n         * @param {Function} callback\n         */\n        ready: function (callback) {\n            callback();\n        },\n\n        /**\n         * Get data\n         * @global\n         * @returns {Object[]}\n         */\n        getData: function () {\n            return storage.getSelectors();\n        },\n\n        /**\n         * Get / Set clustering state\n         * @global\n         * @param {undefined|boolean} value\n         * @returns {*|boolean}\n         */\n        clustering: function (value) {\n            if (value === undefined) { // act as getter\n                return clusterer.enabled;\n            } else { // act as setter\n                clusterer.enabled = value;\n                if (value) {\n                    clusterer.setMaxZoom(null);\n                    clusterer.setGridSize(50);\n                } else {\n                    clusterer.setMaxZoom(1);\n                    clusterer.setGridSize(1);\n                }\n                clusterer.resetViewport();\n                clusterer.redraw();\n            }\n        },\n\n        /**\n         * Get / Set map type\n         * @global\n         * @param {undefined|string} value\n         * @returns {*}\n         */\n        type: function (value) {\n            if (value === undefined) { // act as getter\n                return gmap.getMapTypeId();\n            } else { // act as setter\n                return gmap.setMapTypeId(value);\n            }\n        }\n    };\n\n    return Api;\n\n})();","'use strict';\n\n// expose API\nwindow.fruskac = new fruskac.Api();\n\nvar util = new fruskac.Util();\n\nfruskac.isCrossDomain = window.self !== window.top && document.referrer && !(new RegExp('//' + document.domain)).test(document.referrer);\nfruskac.lang = util.getParameterByName('lang') || (window.self !== window.top && window.top.document.documentElement.lang) || 'en';\n\nvar i18n  = new fruskac.I18n(fruskac.lang);\n\nvar storage = new fruskac.Storage();\n\nvar mapConfig = {\n    center: new google.maps.LatLng(45.167031, 19.69677),\n    zoom: 11,\n    mapTypeId: google.maps.MapTypeId.TERRAIN,\n    mapTypeControl: false,\n    zoomControlOptions: {\n        position: google.maps.ControlPosition.LEFT_BOTTOM\n    },\n    streetViewControlOptions: {\n        position: google.maps.ControlPosition.LEFT_BOTTOM\n    }\n};\n\nvar latLngZoom = util.getParameterByName(fruskac.PARAMETER.COORDINATES);\nif (latLngZoom) {\n    var parts = util.getParameterPartsByName(fruskac.PARAMETER.COORDINATES);\n    if (parts && parts.length) {\n        if (parts[0] && parts[1]) {\n            mapConfig.center = new google.maps.LatLng(parts[0], parts[1]);\n        }\n        if (parts[2]) {\n            mapConfig.zoom = parseFloat(parts[2]);\n        }\n    }\n}\n\nvar gmap = new google.maps.Map(document.getElementById('map'), mapConfig);\n\nvar overlayImageBounds = {\n    north: 45.166508,\n    south: 45.136001,\n    east: 19.767672,\n    west: 19.681498\n};\nvar overlayOptions = {\n    opacity: 0.8,\n    clickable: false\n};\nvar groundOverlay = new google.maps.GroundOverlay(\n    'http://fruskac.net/sites/all/themes/fruskac/css/img/fruskac-logo-map.png',\n    overlayImageBounds,\n    overlayOptions\n);\ngroundOverlay.setMap(gmap);\n\nvar map = new fruskac.Map(gmap);\n\nvar clusterer = new MarkerClusterer(gmap, [], {\n    maxZoom: 12,\n    gridSize: 50,\n    styles: [\n        {\n            textColor: 'white',\n            url: 'http://fruskac.net/sites/all/themes/fruskac/css/img/maps.png',\n            backgroundPosition: '0 -523px',\n            height: 32,\n            width: 32\n        },\n        {\n            textColor: 'white',\n            url: 'http://fruskac.net/sites/all/themes/fruskac/css/img/maps.png',\n            backgroundPosition: '0 -443px',\n            height: 48,\n            width: 48\n        },\n        {\n            textColor: 'white',\n            url: 'http://fruskac.net/sites/all/themes/fruskac/css/img/maps.png',\n            backgroundPosition: '0 -379px',\n            height: 64,\n            width: 64\n        }\n    ]\n});\n\nclusterer.enabled = true;\n\nvar chart = new fruskac.Chart(document.getElementById('chart_container'));\n\n/*\n* URL param: \"l\" defines layers visible. If not defined, default visibility will be used\n*/\n\n// default layers and their visibility\nvar layers = [\n    {\n        source: 'locations-' + fruskac.lang,\n        type: fruskac.TYPE.MARKER,\n        visible: true\n    },\n    {\n        source: 'marathon',\n        type: fruskac.TYPE.TRACK,\n        visible: false\n    },\n    {\n        source: 'protection',\n        type: fruskac.TYPE.KML,\n        visible: false\n    },\n    {\n        source: 'time',\n        type: fruskac.TYPE.MARKER,\n        visible: false\n    }\n];\n\nvar activeLayers = [];\n\nvar layersFromUrl = util.getParameterPartsByName(fruskac.PARAMETER.LAYERS);\n\nlayers.forEach(function (layer) {\n\n    if (layersFromUrl) { // if layer URL param exists, layers' visibility should follow\n        layer.visible = layersFromUrl.indexOf(layer.name) !== -1;\n    }\n\n    activeLayers.push(Object.values(layer));\n});\n\n\n/*\nLoad remote track\n */\n\nvar track = util.getParameterByName(fruskac.PARAMETER.TRACK);\n\n/*\nLoad from \"activeLayers\"\n */\n\nvar loader = new fruskac.Loader();\n\nvar focus = util.getParameterByName(fruskac.PARAMETER.FOCUS);\n\nloader.load(activeLayers).then(function () {\n\n    if (track) {\n        loader.append(track, fruskac.TYPE.TRACK).then(function (object) {\n            google.maps.event.addListenerOnce(gmap, 'idle', function () { // wait for map to be loaded\n                map.focus(object); // focus on appended object\n            });\n        })\n    }\n\n    if (focus) {\n        google.maps.event.addListenerOnce(gmap, 'idle', function () { // wait for map to be loaded\n            storage.focus(focus, true); // focus on selected object\n        });\n    }\n});\n"]}