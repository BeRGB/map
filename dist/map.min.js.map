{"version":3,"sources":["bootstrap.js","api.js","util.js","i18n.const.js","params.const.js","type.const.js","googleMaps.js","marker.js","track.js","kml.js","i18n.js","chart.js","map.js","storage.js","loader.js","init.js"],"names":["api","window","fruskac","prototype","Util","getParameterByName","name","url","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","getParameterPartsByName","value","this","split","I18N","LANGUAGES","SOURCE","DISTANCE","en","rs","ELEVATION","PARAMETER","FOCUS","COORDINATES","TRACK","LAYERS","TYPE","MARKER","KML","google","maps","Polyline","getBounds","bounds","LatLngBounds","getPath","forEach","item","extend","LatLng","lat","lng","Marker","options","_","map","gmap","icon","hasOwnProperty","MarkerImage","Size","width","height","Point","x","y","marker","event","addListener","showInfoWindow","getInfoWindowContent","data","html","title","description","image","link","Track","geodesic","strokeColor","strokeOpacity","strokeWeight","Kml","preserveViewport","suppressInfoWindows","type","KmlLayer","i18n","lang","Object","keys","key","add","id","values","source","translate","Chart","container","self","visible","getPathElevation","points","elevator","callback","gpath","point","push","getElevationAlongPath","path","samples","length","elevations","distance","rows","e","index","distanceFromPrevious","getDistance","parseFloat","elevation","p1","p2","R","dLat","rad","dLong","a","Math","sin","cos","c","atan2","sqrt","d","toFixed","PI","setVisible","className","$","addClass","removeClass","center","getCenter","trigger","setCenter","show","isFixedLayout","find","remove","ElevationService","charts","load","packages","language","setOnLoadCallback","visualization","DataTable","addColumn","addRows","lineWidth","focusTarget","hAxis","vAxis","minValue","legend","position","chart","AreaChart","document","getElementById","draw","events","coords","placeMarker","getAt","row","on","Map","infoWindow","InfoWindow","content","isCrossDomain","frameElement","hasAttribute","getType","object","Promise","resolve","addMarker","then","addTrack","track","addKml","kml","icon_data","clusterer","get","response","each","i","v","Number","attr","lon","p","setMap","removeMarker","focus","setZoom","panTo","setAnimation","Animation","BOUNCE","fitBounds","animateTo","duration","setContent","open","fullscreen","params","getZoom","l","util","f","encodeURIComponent","join","Storage","getParentSelector","selector","parseSelector","hasParentSelector","selectorParts","splice","indexOf","isArray","getSelectorsForContainer","items","children","itemSelector","getVisible","storage","getState","setState","select","subChildren","root","query","child","parentSelector","parentVisible","parent","getSelectors","Loader","success","promises","tag","all","apply","append","top","referrer","domain","test","documentElement","mapConfig","zoom","mapTypeId","MapTypeId","TERRAIN","mapTypeControl","zoomControlOptions","ControlPosition","LEFT_BOTTOM","streetViewControlOptions","latLngZoom","parts","overlayImageBounds","north","south","east","west","overlayOptions","opacity","clickable","groundOverlay","GroundOverlay","MarkerClusterer","maxZoom","gridSize","imagePath","enabled","layers","activeLayers","layersFromUrl","layer","loader","addListenerOnce","ready","getData","clustering","undefined","setMaxZoom","setGridSize","resetViewport","redraw","getMapTypeId","setMapTypeId"],"mappings":"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","file":"map.min.js","sourcesContent":["'use strict';\n\n(function (window) {\n\n    function fruskac() {\n    }\n\n    fruskac.prototype = fruskac;\n\n    window.fruskac = fruskac;\n\n})(window);","'use strict';\n\nfunction api() {\n}\n\napi.prototype = {\n\n    /**\n     * Fired when ready\n     * @global\n     * @param {Function} callback\n     */\n    ready: function (callback) {\n        callback();\n    },\n\n    /**\n     * Get data\n     * @global\n     * @returns {Object[]}\n     */\n    getData: function () {\n        return storage.getSelectors();\n    },\n\n    /**\n     * Get / Set clustering state\n     * @global\n     * @param {undefined|boolean} value\n     * @returns {*|boolean}\n     */\n    clustering: function (value) {\n        if (value === undefined) { // act as getter\n            return clusterer.enabled;\n        } else { // act as setter\n            clusterer.enabled = value;\n            if (value) {\n                clusterer.setMaxZoom(null);\n                clusterer.setGridSize(50);\n            } else {\n                clusterer.setMaxZoom(1);\n                clusterer.setGridSize(1);\n            }\n            clusterer.resetViewport();\n            clusterer.redraw();\n        }\n    },\n\n    /**\n     * Get / Set map type\n     * @global\n     * @param {undefined|string} value\n     * @returns {*}\n     */\n    type: function (value) {\n        if (value === undefined) { // act as getter\n            return gmap.getMapTypeId();\n        } else { // act as setter\n            return gmap.setMapTypeId(value);\n        }\n    }\n};\n","'use strict';\n\nfruskac.Util = (function () {\n\n    function Util() {}\n\n    Util.prototype = {\n        getParameterByName: function (name, url) {\n            if (!url) {\n                url = window.location.href;\n            }\n            name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n            var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n                results = regex.exec(url);\n            if (!results) return null;\n            if (!results[2]) return '';\n            return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n        },\n\n        getParameterPartsByName: function (name) {\n            var value = this.getParameterByName(name);\n            if (!value) {\n                return;\n            }\n            return value.split(',');\n        }\n\n    };\n\n    return Util;\n\n})();","'use strict';\n\nfruskac.I18N = {\n    LANGUAGES: [\n        'en',\n        'rs'\n    ],\n    SOURCE: {\n        DISTANCE: [\n            { en: 'Distance' },\n            { rs: 'Udaljenost' }\n        ],\n        ELEVATION: [\n            { en: 'Elevation' },\n            { rs: 'Visina' }\n        ]\n    }\n\n};\n\n","'use strict';\n\nfruskac.PARAMETER = {\n    FOCUS: 'f',\n    COORDINATES: 'c',\n    TRACK: 't',\n    LAYERS: 'l'\n};","'use strict';\n\nfruskac.TYPE = {\n    MARKER: 'marker',\n    TRACK: 'track',\n    KML: 'kml'\n};","'use strict';\n\n(function (google) {\n\n    /**\n     * Extend google.maps.Polyline to get bounds based on path\n     *\n     * @returns {google.maps.LatLngBounds}\n     */\n    google.maps.Polyline.prototype.getBounds = function () {\n        var bounds = new google.maps.LatLngBounds();\n        this.getPath().forEach(function (item) {\n            bounds.extend(new google.maps.LatLng(item.lat(), item.lng()));\n        });\n        return bounds;\n    };\n\n\n})(google);","'use strict';\n\nfruskac.Marker = (function () {\n\n    /**\n     * @global\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Marker(options) {\n\n        options = _.extend({\n            map: gmap\n        }, options);\n\n        var icon;\n\n        if (typeof options.icon === 'string') {\n\n            switch (options.icon) {\n                case 'lakes':\n                    icon = 'mm_20_purple';\n                    break;\n                case 'monasteries':\n                    icon = 'mm_20_yellow';\n                    break;\n                case 'misc':\n                    icon = 'mm_20_blue';\n                    break;\n                case 'springs':\n                    icon = 'mm_20_white';\n                    break;\n                case 'picnic-areas':\n                    icon = 'mm_20_green';\n                    break;\n                case 'monuments':\n                    icon = 'mm_20_red';\n                    break;\n                case 'fishponds':\n                    icon = 'mm_20_black';\n                    break;\n                case 'waterfalls':\n                    icon = 'mm_20_orange';\n                    break;\n                case 'lookouts':\n                    icon = 'mm_20_gray';\n                    break;\n                case 'meadows':\n                    icon = 'mm_20_brown';\n                    break;\n                default:\n                    icon = 'mm_20_white';\n                    break;\n            }\n\n            options.icon = '//maps.gstatic.com/mapfiles/ridefinder-images/' + icon + '.png';\n\n        } else {\n\n            if (options.icon && options.icon.hasOwnProperty('url')) {\n                options.icon = new google.maps.MarkerImage(\n                    options.icon.url,\n                    new google.maps.Size(options.icon.width, options.icon.height),\n                    new google.maps.Point(options.icon.x, options.icon.y)\n                )\n            } else {\n                options.icon = '//maps.gstatic.com/mapfiles/ridefinder-images/mm_20_white.png';\n            }\n\n        }\n\n        return (function () {\n\n            var marker = new google.maps.Marker(options);\n\n            google.maps.event.addListener(marker, 'click', function () {\n                map.showInfoWindow(getInfoWindowContent(options.data), this);\n            });\n\n            return marker;\n\n        })();\n    }\n\n    /**\n     * Creates HTML that will be presented on InfoWindow\n     *\n     * @param {Object} data\n     * @returns {string}\n     */\n    function getInfoWindowContent(data) {\n        var html = '<h1>' + data.title + '</h1>';\n        if (data.description) {\n            html += '<p>' + data.description + '</p>';\n        }\n        if (data.image) {\n            html += '<img src=\"' + data.image + '\">';\n        }\n        if (data.link) {\n            html += '<a href=\"' + data.link + '\" target=\"_blank\">' + data.link + '</a>';\n        }\n        return html;\n    }\n\n    return Marker;\n\n})();\n","'use strict';\n\nfruskac.Track = (function () {\n\n    /**\n     * Track\n     * @global\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Track(options) {\n\n        options = _.extend({\n            map: gmap,\n            geodesic: true,\n            strokeColor: 'rgb(51, 102, 204)',\n            strokeOpacity: 1.0,\n            strokeWeight: 4\n        }, options);\n\n        return (function () {\n            return new google.maps.Polyline(options)\n        })();\n    }\n\n    return Track;\n\n})();","'use strict';\n\nfruskac.Kml = (function () {\n\n    /**\n     * KML\n     * @global\n     * @param {string} url\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Kml(url, options) {\n\n        options = _.extend({\n            map: gmap,\n            preserveViewport: true,\n            suppressInfoWindows: true,\n            data: {\n                type: 'kml'\n            }\n        }, options);\n\n        return (function () {\n            return new google.maps.KmlLayer(url, options)\n        })();\n    }\n\n    return Kml;\n\n})();","'use strict';\n\nfruskac.i18n = (function () {\n\n    var source = {};\n\n    function i18n(lang) {\n        this.lang = lang;\n        Object.keys(fruskac.I18N.SOURCE).forEach(function (key) {\n            add(key, fruskac.I18N.SOURCE[key])\n        })\n    }\n\n    i18n.prototype = {\n        translate: function (id) {\n            return source[this.lang] && source[this.lang][id] || '__TRANSLATION_MISSING__';\n        }\n    };\n\n    function add(id, values) {\n        values.forEach(function (value) {\n            fruskac.I18N.LANGUAGES.forEach(function (lang) {\n                if (value[lang]) {\n                    if (!source[lang]) {\n                        source[lang] = {};\n                    }\n                    source[lang][id] = value[lang];\n                }\n            })\n        });\n    }\n\n    return i18n;\n\n})();","'use strict';\n\nfruskac.Chart = (function () {\n\n    /**\n     * @global\n     * @param {HTMLDomElement} container\n     * @constructor\n     */\n    function Chart(container) {\n        var self = this;\n        self.visible = false;\n        self.container = container;\n    }\n\n    /**\n     * @global\n     */\n    Chart.prototype = {\n\n        /**\n         * Set chart container visibility\n         *\n         * @param {boolean} value\n         */\n        setVisible: function (value) {\n\n            var self = this;\n\n            self.visible = value;\n\n            var className = 'on';\n\n            if (self.visible) {\n                $(self.container).addClass(className);\n            } else {\n                $(self.container).removeClass(className);\n            }\n\n            var center = gmap.getCenter();\n            google.maps.event.trigger(gmap, \"resize\");\n            gmap.setCenter(center);\n\n        },\n\n        /**\n         * Show chart\n         *\n         * @param {Array} points\n         */\n        show: function (points, isFixedLayout) {\n\n            var self = this;\n\n            self.setVisible(true);\n\n            if (isFixedLayout) {\n                $(self.container).find('button').remove();\n            }\n\n            var elevator = new google.maps.ElevationService;\n\n            // Load the Visualization API and the corechart package.\n            google.charts.load('current', {\n                packages: ['corechart'],\n                language: fruskac.lang\n            });\n\n            // Set a callback to run when the Google Visualization API is loaded.\n            google.charts.setOnLoadCallback(function () {\n                getPathElevation(points, elevator, function (rows) {\n\n                    // Create the data table.\n                    var data = new google.visualization.DataTable();\n                    data.addColumn('number', i18n.translate('DISTANCE'));\n                    data.addColumn('number', i18n.translate('ELEVATION'));\n                    data.addRows(rows);\n\n                    // Set chart options\n                    var options = {\n                        lineWidth: 5,\n                        focusTarget: 'category',\n                        hAxis: {\n                            title: i18n.translate('DISTANCE') + ' (km)'\n                        },\n                        vAxis: {\n                            title: i18n.translate('ELEVATION') + ' (m)',\n                            minValue: 0\n                        },\n                        legend: {\n                            position: \"none\"\n                        }\n                    };\n\n                    // Instantiate and draw our chart, passing in some options.\n                    var chart = new google.visualization.AreaChart(document.getElementById('chart'));\n                    chart.draw(data, options);\n\n                    google.visualization.events.addListener(chart, 'onmouseover', function (coords) {\n                        map.placeMarker(points.getAt(coords.row))\n                    });\n\n                    $(window).on('resize', function () {\n                        chart.draw(data, options);\n                    });\n\n                });\n            });\n\n        }\n    };\n\n\n    /**\n     *\n     * @param {Object[]} points\n     * @param {google.maps.ElevationService} elevator\n     * @param {Function} callback\n     */\n    function getPathElevation(points, elevator, callback) {\n\n        var gpath = [];\n        points.forEach(function (point) {\n            gpath.push(point)\n        });\n\n        // Create a PathElevationRequest object using this array.\n        elevator.getElevationAlongPath({\n            'path': gpath,\n            'samples': gpath.length\n        }, function (elevations) {\n            var distance = 0;\n            var rows = [];\n            elevations.forEach(function (e, index) {\n                var distanceFromPrevious;\n                if (index) {\n                    distanceFromPrevious = getDistance(elevations[index].location, elevations[index - 1].location)\n                } else {\n                    distanceFromPrevious = 0;\n                }\n                distance += parseFloat(distanceFromPrevious);\n                rows.push([distance, e.elevation]);\n            });\n            callback(rows);\n        });\n    }\n\n    /**\n     * calculates distance between two points in km's\n     *\n     * @param {google.maps.LatLng} p1\n     * @param {google.maps.LatLng} p2\n     * @returns {string}\n     */\n    function getDistance(p1, p2) {\n        var R = 6378137; // Earth’s mean radius in meter\n        var dLat = rad(p2.lat() - p1.lat());\n        var dLong = rad(p2.lng() - p1.lng());\n        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *\n            Math.sin(dLong / 2) * Math.sin(dLong / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var d = R * c;\n        return (d / 1000).toFixed(2); // \"d\" returns the distance in meter\n        //return (google.maps.geometry.spherical.computeDistanceBetween(p1, p2) / 1000).toFixed(2);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    function rad(x) {\n        return x * Math.PI / 180;\n    }\n\n    return Chart;\n\n})();","'use strict';\n\nfruskac.Map = (function () {\n\n    /**\n     * Map\n     * @global\n     * @param {google.maps.Map} map\n     * @constructor\n     */\n    function Map(map) {\n\n        this.infoWindow = new google.maps.InfoWindow({\n            content: \"holding...\"\n        });\n\n        // show fullscreen button if CrossDomain or if \"allowfullscreen\" attribute added to iframe\n        if (fruskac.isCrossDomain || window.frameElement && window.frameElement.hasAttribute('allowFullScreen')) {\n            $('#map_container > button').show();\n        }\n\n    }\n\n    /**\n     * @global\n     */\n    Map.prototype = {\n\n        /**\n         * Add object to map\n         * @param {Object} data\n         * @param {string} type\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        add: function (data, type, visible) {\n\n            var self = this;\n\n            return new Promise(function (resolve) {\n                switch (type) {\n                    case fruskac.TYPE.MARKER:\n                        return self.addMarker(data, visible).then(function (marker) {\n                            resolve(marker);\n                        });\n                        break;\n                    case fruskac.TYPE.TRACK:\n                        return self.addTrack(data, visible).then(function (track) {\n                            resolve(track);\n                        });\n                        break;\n                    case fruskac.TYPE.KML:\n                        return self.addKml(data, visible).then(function (kml) {\n                            resolve(kml);\n                        });\n                        break;\n                }\n            });\n\n        },\n\n        /**\n         * Add marker to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addMarker: function (data, visible) {\n\n            return new Promise(function (resolve) {\n\n                var marker = new fruskac.Marker({\n                    position: new google.maps.LatLng(data.lat, data.lng),\n                    title: data.data.title,\n                    icon: data.options.icon_data,\n                    data: data.data\n                });\n\n                marker.setVisible(visible);\n\n                if (visible) {\n                    clusterer.addMarker(marker);\n                }\n\n                resolve(marker);\n\n            })\n\n        },\n\n        /**\n         * Add track to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addTrack: function (data, visible) {\n\n            var url;\n\n            if (typeof data === 'string') {\n                url = data;\n            } else {\n                url = '../' + data.url;\n            }\n\n            return new Promise(function (resolve) {\n\n                return $.get(url).then(function (response) {\n                    var points = [];\n                    $(response).find('trkpt').each(function (i, v) {\n                        var lat = Number($(this).attr('lat'));\n                        var lon = Number($(this).attr('lon'));\n                        var p = new google.maps.LatLng(lat, lon);\n                        points.push(p);\n                    });\n\n                    var track = new fruskac.Track({\n                        path: points\n                    });\n\n                    track.setVisible(visible);\n\n                    resolve(track);\n\n                });\n\n            });\n\n        },\n\n        /**\n         * Add KML layer to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addKml: function (data, visible) {\n\n            return new Promise(function (resolve) {\n\n                var kml = new fruskac.Kml(data.url);\n\n                if (!visible) {\n                    kml.setMap(null);\n                }\n\n                resolve(kml);\n\n            })\n\n        },\n\n        /**\n         * Set visibility on object\n         * @param {Object} object\n         * @param {boolean} value\n         */\n        setVisible: function (object, value) {\n            switch (getType(object)) {\n                case fruskac.TYPE.MARKER:\n                    object.setVisible(value);\n                    if (value) {\n                        clusterer.addMarker(object);\n                    } else {\n                        clusterer.removeMarker(object);\n                    }\n                    break;\n                case fruskac.TYPE.TRACK:\n                    object.setVisible(value);\n                    break;\n                case fruskac.TYPE.KML:\n                    object.setMap(value ? gmap : null);\n                    break;\n            }\n        },\n\n        /**\n         * Focus one object on map, fit bounds\n         * @param {Object} object\n         */\n        focus: function (object, isFixedLayout) {\n            switch (getType(object)) {\n                case fruskac.TYPE.MARKER:\n                    gmap.setZoom(14);\n                    gmap.panTo(object.position);\n                    object.setAnimation(google.maps.Animation.BOUNCE);\n                    // TODO: show info window\n                    //map.showInfoWindow(getInfoWindowContent(options.data), this);\n                    break;\n                case fruskac.TYPE.TRACK:\n                    gmap.fitBounds(object.getBounds());\n                    chart.show(object.getPath(), isFixedLayout);\n                    break;\n            }\n        },\n\n        /**\n         * Place marker on map\n         * @param {google.maps.LatLng} point\n         */\n        placeMarker: function (point) {\n\n            var self = this;\n\n            if (!self.marker) {\n                self.marker = new fruskac.Marker({\n                    position: point\n                });\n            } else {\n                self.marker.animateTo(point, {\n                    duration: 50\n                });\n            }\n        },\n\n        /**\n         * Show info window for Marker\n         * @param {string} html\n         * @param {google.maps.Marker} marker\n         */\n        showInfoWindow: function (html, marker) {\n\n            var self = this;\n\n            self.infoWindow.setContent(html);\n            self.infoWindow.open(gmap, marker);\n\n        },\n\n        fullscreen: function () {\n\n            var params = {\n                c: gmap.getCenter().lat() + ',' + gmap.getCenter().lng() + ',' + gmap.getZoom(),\n                l: util.getParameterByName(fruskac.PARAMETER.LAYERS),\n                f: util.getParameterByName(fruskac.PARAMETER.FOCUS),\n                lang: fruskac.lang\n            };\n\n            var url = '/fruskac/map/examples/angularjs.html#!?' + Object.keys(params).map(function(i) {\n                    return params[i] && encodeURIComponent(i) + \"=\" + encodeURIComponent(params[i]);\n                }).join('&');\n\n            // TODO: update location when published\n            window.open(url, '_blank');\n        }\n    };\n\n    function getType(object) {\n        if (!object) {\n            return;\n        }\n        if (object.hasOwnProperty('position')) {//marker\n            return fruskac.TYPE.MARKER;\n        } else if (object.hasOwnProperty('strokeColor')) {\n            return fruskac.TYPE.TRACK;\n        } else if (object.hasOwnProperty('suppressInfoWindows')) {\n            return fruskac.TYPE.KML;\n        }\n    }\n\n    return Map;\n\n})();","'use strict';\n\nfruskac.Storage = (function () {\n    /**\n     * @global\n     * @param {Array} Initial data array\n     * @constructor\n     */\n    function Storage(data) {\n        if (!data) {\n            data = [];\n        }\n        this.data = data;\n    }\n\n    /**\n     * @global\n     */\n    Storage.prototype = {\n\n        /**\n         * Add object to storage\n         * @param {Object} value\n         * @param {Array|string} selector\n         * @param {string} type\n         * @param {boolean} visible\n         * @returns {*}\n         */\n        add: function (value, selector, type, visible) {\n\n            var self = this;\n\n            selector = parseSelector(selector);\n\n            var container;\n\n            if (selector) {\n                var object = self.get(selector);\n                if (object) {\n                    if (!object.children) {\n                        object.children = [];\n                    }\n                    container = object.children;\n                }\n            } else {\n                container = self.data;\n            }\n\n            if (type) {\n                object.type = type;\n                return map.add(value, type, visible).then(function (object) {\n                    container.push(object);\n                });\n            } else {\n                return new Promise(function (resolve) {\n                    container.push(value);\n                    resolve(value);\n                })\n            }\n\n        },\n\n        /**\n         * Gets root data array\n         * @returns {*}\n         */\n        root: function () {\n            return this.data;\n        },\n\n        /**\n         * Gets object based on selector and container\n         * @param {Array|string} selector\n         * @param {Array} container\n         * @returns {*}\n         */\n        get: function (selector, container) {\n\n            selector = parseSelector(selector);\n\n            if (!container) {\n                container = this.data;\n            }\n\n            if (!selector) {\n                return;\n            }\n\n            if (selector.indexOf(':') !== -1) {\n                var selectorParts = selector.split(':');\n                var container = _.find(container, {id: selectorParts[0]}).children;\n                selectorParts = selectorParts.splice(1);\n                return this.get(selectorParts.join(':'), container);\n            }\n\n            return _.find(container, function (object) {\n                if (object && object.id === selector || (object.hasOwnProperty('data') && object.data.id == selector)) {\n                    return object;\n                }\n            });\n\n        },\n\n        /**\n         * Gets children based on selector and container\n         * @param {Array|string} selector\n         * @param {Array} container\n         * @returns {*|Array|HTMLElement[]}\n         */\n        query: function (selector, container) {\n\n            selector = parseSelector(selector);\n\n            if (!container) {\n                container = this.data;\n            }\n\n            var object = this.get(selector, container);\n\n            return object.children;\n\n        },\n\n        /**\n         * Set state (on/off)\n         * @param {Array|string} selector\n         * @param {boolean} value\n         */\n        setState: function (selector, value) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            if (object) {\n                object.on = value;\n                this.setVisible(selector, value);\n            }\n\n        },\n\n        /**\n         * Get state\n         * @param {Array|string} selector\n         * @returns {*}\n         */\n        getState: function (selector) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            if (object) {\n                return object.on;\n            }\n\n        },\n\n        /**\n         * Set visibility\n         * @param {Array|string} selector\n         * @param {boolean} value\n         */\n        setVisible: function (selector, value) {\n\n            selector = parseSelector(selector);\n\n            var self = this;\n\n            var object = this.get(selector);\n\n            if (object) {\n                object.visible = value;\n\n                if (object.children) {\n                    object.children.forEach(function (child) {\n                        if (child.id) {\n                            self.setVisible([selector, child.id], value)\n                        } else {\n                            var v = value ? object.on : false;\n                            map.setVisible(child, v);\n                        }\n                    })\n                }\n            }\n\n        },\n\n\n        /**\n         * Get visibility\n         * @param {Array|string} selector\n         * @returns {boolean}\n         */\n        getVisible: function (selector) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            var visible = true;\n\n            if (object) {\n                visible = object.visible;\n\n                if (hasParentSelector(selector)) {\n                    var parentSelector = getParentSelector(selector);\n                    var parentVisible = this.getVisible(parentSelector);\n                    if (parentVisible) {\n                        if (hasParentSelector(parentSelector)) {\n                            return this.getVisible(getParentSelector(parentSelector))\n                        }\n                    } else {\n                        return false;\n                    }\n                }\n\n            }\n\n            return visible;\n\n        },\n\n        /**\n         * Focus object based on selector\n         * @param {Array|string} selector\n         */\n        focus: function (selector, isFixedLayout) {\n\n            var self = this;\n\n            selector = parseSelector(selector);\n\n            var object = self.get(selector);\n\n            if (hasParentSelector(selector)) {\n\n                var parent = self.get(getParentSelector(selector));\n\n                self.setState(parent.id, true);\n\n                parent.children.forEach(function (child) {\n                    if (child.hasOwnProperty('id')) {\n                        self.setState([parent.id, child.id], child.id === object.id);\n                    }\n                });\n\n            }\n\n            map.focus(object && object.hasOwnProperty('children') ? object.children[0] : object, isFixedLayout);\n\n        },\n\n        getSelectors: function () {\n            return getSelectorsForContainer(storage.root());\n        }\n    };\n\n    /**\n     * Get parent selector\n     * @param {Array|string} selector\n     * @returns {string}\n     */\n    function getParentSelector(selector) {\n\n        selector = parseSelector(selector);\n\n        if (!hasParentSelector(selector)) {\n            return;\n        }\n\n        var selectorParts = selector.split(':');\n        selectorParts.splice(-1);\n\n        return selectorParts.join(':');\n    }\n\n    /**\n     * Test if parent selector is available\n     * @param {Array|string} selector\n     * @returns {boolean}\n     */\n    function hasParentSelector(selector) {\n\n        selector = parseSelector(selector);\n\n        return selector.indexOf(':') !== -1;\n    }\n\n    /**\n     * Parse array (if provided) into string\n     * @param {Array|string} selector\n     * @returns {*}\n     */\n    function parseSelector(selector) {\n        if (_.isArray(selector)) {\n            selector = selector.join(':');\n        }\n\n        return selector;\n\n    }\n\n    /**\n     *\n     * @param {Array} items\n     * @param {Array|string} selector\n     * @returns {Array}\n     */\n    function getSelectorsForContainer(items, selector) {\n\n        selector = parseSelector(selector);\n\n        var children = [];\n\n        items.forEach(function (item) {\n\n            if (!item.id) {\n                return;\n            }\n\n            var itemSelector;\n            if (selector) {\n                itemSelector = parseSelector([selector, item.id]);\n            } else {\n                itemSelector = item.id\n            }\n\n            var object = {\n                id: item.id,\n                getVisible: function () {\n                    return storage.getState(itemSelector);\n                },\n                setVisible: function (value) {\n                    return storage.setState(itemSelector, value);\n                },\n                select: function () {\n                    return storage.focus(itemSelector);\n                }\n            };\n\n            if (item.type) {\n                object.type = item.type;\n            }\n\n            if (item.children && item.children.length) {\n                var subChildren = getSelectorsForContainer(item.children, itemSelector);\n                if (subChildren && subChildren.length) {\n                    object.children = subChildren;\n                }\n            }\n\n            children.push(object)\n\n        });\n\n        return children;\n\n    }\n\n\n    return Storage;\n\n})();","'use strict';\n\nfruskac.Loader = (function () {\n\n    /**\n     * Loader\n     *\n     * @global\n     * @constructor\n     */\n    function Loader() {\n    }\n\n    /**\n     * @global\n     */\n    Loader.prototype = {\n\n\n        /**\n         * Load items\n         *\n         * @param {Array} items\n         */\n        load: function (items) {\n\n            var promises = [];\n\n            items.forEach(function (item) {\n                promises.push(load.apply(this, item));\n            });\n\n            return Promise.all(promises);\n\n        },\n        \n        append: function (source, type) {\n            return map.add(source, type, true)\n        }\n\n    };\n\n    /**\n     * Initialize layers\n     *\n     * @param {string|Object} source\n     * @param {string} type\n     * @param {boolean} visible\n     */\n    function load(source, type, visible) {\n\n        if (typeof source === 'string') {\n            source = {\n                name: source.replace(/-\\w{2}/,''), // remove language suffix from name\n                url: '../data/' + source + '.json'\n            }\n        }\n\n        return storage.add({\n            id: source.name,\n            visible: visible,\n            on: visible\n        }).then(function () {\n            return $.get(source.url).success(function (response) { // get json array of items\n\n                var promises = [];\n\n                response.forEach(function (item) {\n                    var p, container = storage.get([source.name, item.tag]);\n\n                    if (container) {\n                        p = new Promise(function (resolve) {\n                            resolve();\n                        });\n                    } else {\n                        p = storage.add({\n                            id: item.tag,\n                            visible: visible,\n                            on: visible,\n                            type: type\n                        }, source.name);\n                    }\n\n                    p.then(function () {\n                        storage.add(item, [source.name, item.tag], type, visible);\n                    });\n\n                    promises.push(p);\n\n                });\n\n                return Promise.all(promises);\n\n            })\n        });\n    }\n\n    return Loader;\n\n})();","'use strict';\n\nvar util = new fruskac.Util();\n\nfruskac.isCrossDomain = window.self !== window.top && document.referrer && !(new RegExp('//' + document.domain)).test(document.referrer);\nfruskac.lang = util.getParameterByName('lang') || (window.self !== window.top && window.top.document.documentElement.lang) || 'en';\n\nvar i18n  = new fruskac.i18n(fruskac.lang);\n\nvar storage = new fruskac.Storage();\n\nvar mapConfig = {\n    center: new google.maps.LatLng(45.167031, 19.69677),\n    zoom: 11,\n    mapTypeId: google.maps.MapTypeId.TERRAIN,\n    mapTypeControl: false,\n    zoomControlOptions: {\n        position: google.maps.ControlPosition.LEFT_BOTTOM\n    },\n    streetViewControlOptions: {\n        position: google.maps.ControlPosition.LEFT_BOTTOM\n    }\n};\n\nvar latLngZoom = util.getParameterByName(fruskac.PARAMETER.COORDINATES);\nif (latLngZoom) {\n    var parts = util.getParameterPartsByName(fruskac.PARAMETER.COORDINATES);\n    if (parts && parts.length) {\n        if (parts[0] && parts[1]) {\n            mapConfig.center = new google.maps.LatLng(parts[0], parts[1]);\n        }\n        if (parts[2]) {\n            mapConfig.zoom = parseFloat(parts[2]);\n        }\n    }\n}\n\nvar gmap = new google.maps.Map(document.getElementById('map'), mapConfig);\n\nvar overlayImageBounds = {\n    north: 45.166508,\n    south: 45.136001,\n    east: 19.767672,\n    west: 19.681498\n};\nvar overlayOptions = {\n    opacity: 0.8,\n    clickable: false\n};\nvar groundOverlay = new google.maps.GroundOverlay(\n    'http://fruskac.net/sites/all/themes/fruskac/css/img/fruskac-logo-map.png',\n    overlayImageBounds,\n    overlayOptions\n);\ngroundOverlay.setMap(gmap);\n\nvar map = new fruskac.Map(gmap);\n\nvar clusterer = new MarkerClusterer(gmap, [], {\n    maxZoom: 12,\n    gridSize: 50,\n    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'\n});\n\nclusterer.enabled = true;\n\nvar chart = new fruskac.Chart(document.getElementById('chart_container'));\n\n/*\n* URL param: \"l\" defines layers visible. If not defined, default visibility will be used\n*/\n\n// default layers and their visibility\nvar layers = [\n    {\n        source: 'locations-' + fruskac.lang,\n        type: fruskac.TYPE.MARKER,\n        visible: true\n    },\n    {\n        source: 'marathon',\n        type: fruskac.TYPE.TRACK,\n        visible: false\n    },\n    {\n        source: 'protection',\n        type: fruskac.TYPE.KML,\n        visible: false\n    },\n    {\n        source: 'time',\n        type: fruskac.TYPE.MARKER,\n        visible: false\n    }\n];\n\nvar activeLayers = [];\n\nvar layersFromUrl = util.getParameterPartsByName(fruskac.PARAMETER.LAYERS);\n\nlayers.forEach(function (layer) {\n\n    if (layersFromUrl) { // if layer URL param exists, layers' visibility should follow\n        layer.visible = layersFromUrl.indexOf(layer.name) !== -1;\n    }\n\n    activeLayers.push(Object.values(layer));\n});\n\n\n/*\nLoad remote track\n */\n\nvar track = util.getParameterByName(fruskac.PARAMETER.TRACK);\n\n/*\nLoad from \"activeLayers\"\n */\n\nvar loader = new fruskac.Loader();\n\nvar focus = util.getParameterByName(fruskac.PARAMETER.FOCUS);\n\nloader.load(activeLayers).then(function () {\n\n    if (track) {\n        loader.append(track, fruskac.TYPE.TRACK).then(function (object) {\n            google.maps.event.addListenerOnce(gmap, 'idle', function () { // wait for map to be loaded\n                map.focus(object); // focus on appended object\n            });\n        })\n    }\n\n    if (focus) {\n        google.maps.event.addListenerOnce(gmap, 'idle', function () { // wait for map to be loaded\n            storage.focus(focus, true); // focus on selected object\n        });\n    }\n});\n"]}