{"version":3,"sources":["bootstrap.js","util.js","i18n.const.js","params.const.js","type.const.js","googleMaps.js","map.config.js","marker.js","track.js","kml.js","i18n.js","chart.js","map.js","storage.js","loader.js","api.js","init.js"],"names":["fruskac","prototype","Util","getParameterByName","name","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","getParameterPartsByName","value","this","split","I18N","LANGUAGES","SOURCE","DISTANCE","en","rs","ELEVATION","PARAMETER_FOCUS","PARAMETER_COORDINATES","PARAMETER_TRACK","PARAMETER_LAYERS","TYPE_MARKER","TYPE_TRACK","TYPE_KML","google","maps","Polyline","getBounds","bounds","LatLngBounds","getPath","forEach","item","extend","LatLng","lat","lng","CONFIG_LANG","CONFIG_FULLSCREEN","CONFIG_LAYERS","type","visible","Marker","options","_","map","gmap","icon","hasOwnProperty","MarkerImage","Size","width","height","Point","x","y","marker","event","addListener","showInfoWindow","getInfoWindowContent","data","html","title","description","image","link","Track","geodesic","strokeColor","strokeOpacity","strokeWeight","Kml","preserveViewport","suppressInfoWindows","KmlLayer","I18n","lang","Object","keys","key","add","id","values","source","translate","Chart","container","self","getPathElevation","points","elevator","callback","gpath","point","push","getElevationAlongPath","path","samples","length","elevations","distance","rows","e","index","distanceFromPrevious","getDistance","parseFloat","elevation","p1","p2","R","dLat","rad","dLong","a","Math","sin","cos","c","atan2","sqrt","d","toFixed","PI","setVisible","className","$","addClass","removeClass","center","getCenter","trigger","setCenter","show","isFixedLayout","find","remove","ElevationService","charts","load","packages","language","setOnLoadCallback","visualization","DataTable","addColumn","i18n","addRows","lineWidth","focusTarget","hAxis","vAxis","minValue","legend","position","chart","AreaChart","document","getElementById","draw","events","coords","placeMarker","getAt","row","on","closeChart","Map","infoWindow","InfoWindow","content","isCrossDomain","frameElement","hasAttribute","getType","object","Promise","resolve","addMarker","then","addTrack","track","addKml","kml","icon_data","clusterer","get","response","each","i","v","Number","attr","lon","p","setMap","removeMarker","focus","setZoom","panTo","setAnimation","Animation","BOUNCE","fitBounds","animateTo","duration","setContent","open","fullscreen","params","getZoom","l","util","f","t","encodeURIComponent","join","Storage","getParentSelector","selector","parseSelector","hasParentSelector","selectorParts","splice","indexOf","toLowerCase","getSelectorsForContainer","items","children","itemSelector","getVisible","storage","getState","setState","select","subChildren","root","query","child","parentSelector","parentVisible","parent","getSelectors","Loader","success","promises","tag","all","apply","append","Api","ready","getData","clustering","undefined","enabled","setMaxZoom","setGridSize","resetViewport","redraw","getMapTypeId","setMapTypeId","top","referrer","domain","test","documentElement","mapConfig","zoom","mapTypeId","MapTypeId","TERRAIN","mapTypeControl","zoomControlOptions","ControlPosition","LEFT_BOTTOM","streetViewControlOptions","latLngZoom","parts","overlayImageBounds","north","south","east","west","overlayOptions","opacity","clickable","groundOverlay","GroundOverlay","MarkerClusterer","maxZoom","gridSize","styles","textColor","backgroundPosition","layers","activeLayers","layersFromUrl","layer","loader","addListenerOnce"],"mappings":"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","file":"map.min.js","sourcesContent":["'use strict';\n\nfunction fruskac() {}\nfruskac.prototype = fruskac;\n","'use strict';\n\nfruskac.Util = (function () {\n\n    function Util() {}\n\n    Util.prototype = {\n        getParameterByName: function (name, url) {\n            if (!url) {\n                url = window.location.href;\n            }\n            name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n            var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n                results = regex.exec(url);\n            if (!results) return null;\n            if (!results[2]) return '';\n            return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n        },\n\n        getParameterPartsByName: function (name) {\n            var value = this.getParameterByName(name);\n            if (!value) {\n                return;\n            }\n            return value.split(',');\n        }\n\n    };\n\n    return Util;\n\n})();","'use strict';\n\nfruskac.I18N = {\n    LANGUAGES: [\n        'en',\n        'rs'\n    ],\n    SOURCE: {\n        DISTANCE: [\n            { en: 'Distance' },\n            { rs: 'Udaljenost' }\n        ],\n        ELEVATION: [\n            { en: 'Elevation' },\n            { rs: 'Visina' }\n        ]\n    }\n\n};\n\n","var PARAMETER_FOCUS = 'f';\nvar PARAMETER_COORDINATES = 'c';\nvar PARAMETER_TRACK = 't';\nvar PARAMETER_LAYERS = 'l';","var TYPE_MARKER = 'marker';\nvar TYPE_TRACK = 'track';\nvar TYPE_KML = 'kml';","'use strict';\n\n(function (google) {\n\n    /**\n     * Extend google.maps.Polyline to get bounds based on path\n     *\n     * @returns {google.maps.LatLngBounds}\n     */\n    google.maps.Polyline.prototype.getBounds = function () {\n        var bounds = new google.maps.LatLngBounds();\n        this.getPath().forEach(function (item) {\n            bounds.extend(new google.maps.LatLng(item.lat(), item.lng()));\n        });\n        return bounds;\n    };\n\n\n})(google);","var CONFIG_LANG = 'en';\nvar CONFIG_FULLSCREEN = '../examples/angularjs-with-material.html#!';\nvar CONFIG_LAYERS = [\n    {\n        url: '../data/locations-' + CONFIG_LANG + '.json',\n        name: 'Locations',\n        type: TYPE_MARKER,\n        visible: true\n    },\n    {\n        url: '../data/marathon.json',\n        name: 'Marathons',\n        type: TYPE_TRACK,\n        visible: false\n    },\n    {\n        url: '../data/protection.json',\n        name: 'Protection',\n        type: TYPE_KML,\n        visible: false\n    },\n    {\n        url: '../data/time.json',\n        name: 'Time',\n        type: TYPE_MARKER,\n        visible: false\n    }\n];","'use strict';\n\nfruskac.Marker = (function () {\n\n    /**\n     * @global\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Marker(options) {\n\n        options = _.extend({\n            map: gmap\n        }, options);\n\n        if (options.icon && options.icon.hasOwnProperty('url')) {\n            options.icon = new google.maps.MarkerImage(\n                options.icon.url,\n                new google.maps.Size(options.icon.width, options.icon.height),\n                new google.maps.Point(options.icon.x, options.icon.y)\n            )\n        }\n\n        return (function () {\n\n            var marker = new google.maps.Marker(options);\n\n            google.maps.event.addListener(marker, 'click', function () {\n                map.showInfoWindow(getInfoWindowContent(options.data), this);\n            });\n\n            return marker;\n\n        })();\n    }\n\n    /**\n     * Creates HTML that will be presented on InfoWindow\n     *\n     * @param {Object} data\n     * @returns {string}\n     */\n    function getInfoWindowContent(data) {\n        var html = '<h1>' + data.title + '</h1>';\n        if (data.description) {\n            html += '<p>' + data.description + '</p>';\n        }\n        if (data.image) {\n            html += '<img src=\"' + data.image + '\">';\n        }\n        if (data.link) {\n            html += '<a href=\"' + data.link + '\" target=\"_blank\">' + data.link + '</a>';\n        }\n        return html;\n    }\n\n    return Marker;\n\n})();\n","'use strict';\n\nfruskac.Track = (function () {\n\n    /**\n     * Track\n     * @global\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Track(options) {\n\n        options = _.extend({\n            map: gmap,\n            geodesic: true,\n            strokeColor: 'rgb(51, 102, 204)',\n            strokeOpacity: 1.0,\n            strokeWeight: 4\n        }, options);\n\n        return (function () {\n            return new google.maps.Polyline(options)\n        })();\n    }\n\n    return Track;\n\n})();","'use strict';\n\nfruskac.Kml = (function () {\n\n    /**\n     * KML\n     * @global\n     * @param {string} url\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Kml(url, options) {\n\n        options = _.extend({\n            map: gmap,\n            preserveViewport: true,\n            suppressInfoWindows: true,\n            data: {\n                type: 'kml'\n            }\n        }, options);\n\n        return (function () {\n            return new google.maps.KmlLayer(url, options)\n        })();\n    }\n\n    return Kml;\n\n})();","'use strict';\n\nfruskac.I18n = (function () {\n\n    var source = {};\n\n    function I18n(lang) {\n        this.lang = lang;\n        Object.keys(fruskac.I18N.SOURCE).forEach(function (key) {\n            add(key, fruskac.I18N.SOURCE[key])\n        })\n    }\n\n    I18n.prototype = {\n        translate: function (id) {\n            return source[this.lang] && source[this.lang][id] || '__TRANSLATION_MISSING__';\n        }\n    };\n\n    function add(id, values) {\n        values.forEach(function (value) {\n            fruskac.I18N.LANGUAGES.forEach(function (lang) {\n                if (value[lang]) {\n                    if (!source[lang]) {\n                        source[lang] = {};\n                    }\n                    source[lang][id] = value[lang];\n                }\n            })\n        });\n    }\n\n    return I18n;\n\n})();","'use strict';\n\nfruskac.Chart = (function () {\n\n    /**\n     * @global\n     * @param {HTMLDomElement} container\n     * @constructor\n     */\n    function Chart(container) {\n        var self = this;\n        self.visible = false;\n        self.container = container;\n    }\n\n    /**\n     * @global\n     */\n    Chart.prototype = {\n\n        /**\n         * Set chart container visibility\n         *\n         * @param {boolean} value\n         */\n        setVisible: function (value) {\n\n            var self = this;\n\n            self.visible = value;\n\n            var className = 'on';\n\n            if (self.visible) {\n                $(self.container).addClass(className);\n            } else {\n                $(self.container).removeClass(className);\n            }\n\n            var center = gmap.getCenter();\n            google.maps.event.trigger(gmap, \"resize\");\n            gmap.setCenter(center);\n\n        },\n\n        /**\n         * Show chart\n         *\n         * @param {Array} points\n         */\n        show: function (points, isFixedLayout) {\n\n            var self = this;\n\n            self.setVisible(true);\n\n            if (isFixedLayout) {\n                $(self.container).find('button').remove();\n            }\n\n            var elevator = new google.maps.ElevationService;\n\n            // Load the Visualization API and the corechart package.\n            google.charts.load('current', {\n                packages: ['corechart'],\n                language: fruskac.lang\n            });\n\n            // Set a callback to run when the Google Visualization API is loaded.\n            google.charts.setOnLoadCallback(function () {\n                getPathElevation(points, elevator, function (rows) {\n\n                    // Create the data table.\n                    var data = new google.visualization.DataTable();\n                    data.addColumn('number', i18n.translate('DISTANCE'));\n                    data.addColumn('number', i18n.translate('ELEVATION'));\n                    data.addRows(rows);\n\n                    // Set chart options\n                    var options = {\n                        lineWidth: 5,\n                        focusTarget: 'category',\n                        hAxis: {\n                            title: i18n.translate('DISTANCE') + ' (km)'\n                        },\n                        vAxis: {\n                            title: i18n.translate('ELEVATION') + ' (m)',\n                            minValue: 0\n                        },\n                        legend: {\n                            position: \"none\"\n                        }\n                    };\n\n                    // Instantiate and draw our chart, passing in some options.\n                    var chart = new google.visualization.AreaChart(document.getElementById('chart'));\n                    chart.draw(data, options);\n\n                    google.visualization.events.addListener(chart, 'onmouseover', function (coords) {\n                        map.placeMarker(points.getAt(coords.row))\n                    });\n\n                    $(window).on('resize', function () {\n                        chart.draw(data, options);\n                    });\n\n                });\n            });\n\n        }\n    };\n\n\n    /**\n     *\n     * @param {Object[]} points\n     * @param {google.maps.ElevationService} elevator\n     * @param {Function} callback\n     */\n    function getPathElevation(points, elevator, callback) {\n\n        var gpath = [];\n        points.forEach(function (point) {\n            gpath.push(point)\n        });\n\n        // Create a PathElevationRequest object using this array.\n        elevator.getElevationAlongPath({\n            'path': gpath,\n            'samples': gpath.length\n        }, function (elevations) {\n            var distance = 0;\n            var rows = [];\n            elevations.forEach(function (e, index) {\n                var distanceFromPrevious;\n                if (index) {\n                    distanceFromPrevious = getDistance(elevations[index].location, elevations[index - 1].location)\n                } else {\n                    distanceFromPrevious = 0;\n                }\n                distance += parseFloat(distanceFromPrevious);\n                rows.push([distance, e.elevation]);\n            });\n            callback(rows);\n        });\n    }\n\n    /**\n     * calculates distance between two points in km's\n     *\n     * @param {google.maps.LatLng} p1\n     * @param {google.maps.LatLng} p2\n     * @returns {string}\n     */\n    function getDistance(p1, p2) {\n        var R = 6378137; // Earth’s mean radius in meter\n        var dLat = rad(p2.lat() - p1.lat());\n        var dLong = rad(p2.lng() - p1.lng());\n        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *\n            Math.sin(dLong / 2) * Math.sin(dLong / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var d = R * c;\n        return (d / 1000).toFixed(2); // \"d\" returns the distance in meter\n        //return (google.maps.geometry.spherical.computeDistanceBetween(p1, p2) / 1000).toFixed(2);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    function rad(x) {\n        return x * Math.PI / 180;\n    }\n\n    window.closeChart = function () {\n        chart.setVisible(false);\n    };\n\n    return Chart;\n\n})();","'use strict';\n\nfruskac.Map = (function () {\n\n    /**\n     * Map\n     * @global\n     * @param {google.maps.Map} map\n     * @constructor\n     */\n    function Map(map) {\n\n        this.infoWindow = new google.maps.InfoWindow({\n            content: \"holding...\"\n        });\n\n        // show fullscreen button if CrossDomain or if \"allowfullscreen\" attribute added to iframe\n        if (fruskac.isCrossDomain || window.frameElement && window.frameElement.hasAttribute('allowFullScreen')) {\n            $('#map_container > button').show();\n        }\n\n    }\n\n    /**\n     * @global\n     */\n    Map.prototype = {\n\n        /**\n         * Add object to map\n         * @param {Object} data\n         * @param {string} type\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        add: function (data, type, visible) {\n\n            var self = this;\n\n            return new Promise(function (resolve) {\n                switch (type) {\n                    case TYPE_MARKER:\n                        return self.addMarker(data, visible).then(function (marker) {\n                            resolve(marker);\n                        });\n                        break;\n                    case TYPE_TRACK:\n                        return self.addTrack(data, visible).then(function (track) {\n                            resolve(track);\n                        });\n                        break;\n                    case TYPE_KML:\n                        return self.addKml(data, visible).then(function (kml) {\n                            resolve(kml);\n                        });\n                        break;\n                }\n            });\n\n        },\n\n        /**\n         * Add marker to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addMarker: function (data, visible) {\n\n            return new Promise(function (resolve) {\n\n                var marker = new fruskac.Marker({\n                    position: new google.maps.LatLng(data.lat, data.lng),\n                    title: data.data.title,\n                    icon: data.options.icon_data,\n                    data: data.data\n                });\n\n                marker.setVisible(visible);\n\n                if (visible) {\n                    clusterer.addMarker(marker);\n                }\n\n                resolve(marker);\n\n            })\n\n        },\n\n        /**\n         * Add track to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addTrack: function (data, visible) {\n\n            var url;\n\n            if (typeof data === 'string') {\n                url = data;\n            } else {\n                url = '../' + data.url;\n            }\n\n            return new Promise(function (resolve) {\n\n                return $.get(url).then(function (response) {\n                    var points = [];\n                    $(response).find('trkpt').each(function (i, v) {\n                        var lat = Number($(this).attr('lat'));\n                        var lon = Number($(this).attr('lon'));\n                        var p = new google.maps.LatLng(lat, lon);\n                        points.push(p);\n                    });\n\n                    var track = new fruskac.Track({\n                        path: points\n                    });\n\n                    track.setVisible(visible);\n\n                    resolve(track);\n\n                });\n\n            });\n\n        },\n\n        /**\n         * Add KML layer to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addKml: function (data, visible) {\n\n            return new Promise(function (resolve) {\n\n                var kml = new fruskac.Kml(data.url);\n\n                if (!visible) {\n                    kml.setMap(null);\n                }\n\n                resolve(kml);\n\n            })\n\n        },\n\n        /**\n         * Set visibility on object\n         * @param {Object} object\n         * @param {boolean} value\n         */\n        setVisible: function (object, value) {\n            switch (getType(object)) {\n                case TYPE_MARKER:\n                    object.setVisible(value);\n                    if (value) {\n                        clusterer.addMarker(object);\n                    } else {\n                        clusterer.removeMarker(object);\n                    }\n                    break;\n                case TYPE_TRACK:\n                    object.setVisible(value);\n                    break;\n                case TYPE_KML:\n                    object.setMap(value ? gmap : null);\n                    break;\n            }\n        },\n\n        /**\n         * Focus one object on map, fit bounds\n         * @param {Object} object\n         */\n        focus: function (object, isFixedLayout) {\n            switch (getType(object)) {\n                case TYPE_MARKER:\n                    gmap.setZoom(14);\n                    gmap.panTo(object.position);\n                    object.setAnimation(google.maps.Animation.BOUNCE);\n                    // TODO: show info window\n                    //map.showInfoWindow(getInfoWindowContent(options.data), this);\n                    break;\n                case TYPE_TRACK:\n                    gmap.fitBounds(object.getBounds());\n                    chart.show(object.getPath(), isFixedLayout);\n                    break;\n            }\n        },\n\n        /**\n         * Place marker on map\n         * @param {google.maps.LatLng} point\n         */\n        placeMarker: function (point) {\n\n            var self = this;\n\n            if (!self.marker) {\n                self.marker = new fruskac.Marker({\n                    position: point\n                });\n            } else {\n                self.marker.animateTo(point, {\n                    duration: 50\n                });\n            }\n        },\n\n        /**\n         * Show info window for Marker\n         * @param {string} html\n         * @param {google.maps.Marker} marker\n         */\n        showInfoWindow: function (html, marker) {\n\n            var self = this;\n\n            self.infoWindow.setContent(html);\n            self.infoWindow.open(gmap, marker);\n\n        },\n\n        fullscreen: function () {\n\n            var params = {\n                c: gmap.getCenter().lat() + ',' + gmap.getCenter().lng() + ',' + gmap.getZoom(),\n                l: util.getParameterByName(PARAMETER_LAYERS),\n                f: util.getParameterByName(PARAMETER_FOCUS),\n                t: util.getParameterByName(PARAMETER_TRACK),\n                lang: fruskac.lang\n            };\n\n            var url = CONFIG_FULLSCREEN + '?' + Object.keys(params).map(function(i) {\n                    return params[i] && encodeURIComponent(i) + \"=\" + encodeURIComponent(params[i]);\n                }).join('&');\n\n            window.open(url, '_blank');\n        }\n    };\n\n    function getType(object) {\n        if (!object) {\n            return;\n        }\n        if (object.hasOwnProperty('position')) {//marker\n            return TYPE_MARKER;\n        } else if (object.hasOwnProperty('strokeColor')) {\n            return TYPE_TRACK;\n        } else if (object.hasOwnProperty('suppressInfoWindows')) {\n            return TYPE_KML;\n        }\n    }\n\n    window.fullscreen = function () {\n        map.fullscreen()\n    };\n\n    return Map;\n\n})();","'use strict';\n\nfruskac.Storage = (function () {\n    /**\n     * @global\n     * @param {Array} Initial data array\n     * @constructor\n     */\n    function Storage(data) {\n        if (!data) {\n            data = [];\n        }\n        this.data = data;\n    }\n\n    /**\n     * @global\n     */\n    Storage.prototype = {\n\n        /**\n         * Add object to storage\n         * @param {Object} value\n         * @param {Array|string} selector\n         * @param {string} type\n         * @param {boolean} visible\n         * @returns {*}\n         */\n        add: function (value, selector, type, visible) {\n\n            var self = this;\n\n            selector = parseSelector(selector);\n\n            var container;\n\n            if (selector) {\n                var object = self.get(selector);\n                if (object) {\n                    if (!object.children) {\n                        object.children = [];\n                    }\n                    container = object.children;\n                }\n            } else {\n                container = self.data;\n            }\n\n            if (type) {\n                object.type = type;\n                return map.add(value, type, visible).then(function (object) {\n                    container.push(object);\n                });\n            } else {\n                return new Promise(function (resolve) {\n                    container.push(value);\n                    resolve(value);\n                })\n            }\n\n        },\n\n        /**\n         * Gets root data array\n         * @returns {*}\n         */\n        root: function () {\n            return this.data;\n        },\n\n        /**\n         * Gets object based on selector and container\n         * @param {Array|string} selector\n         * @param {Array} container\n         * @returns {*}\n         */\n        get: function (selector, container) {\n\n            selector = parseSelector(selector);\n\n            if (!container) {\n                container = this.data;\n            }\n\n            if (!selector) {\n                return;\n            }\n\n            if (selector.indexOf(':') !== -1) {\n                var selectorParts = selector.split(':');\n                var container = _.find(container, {id: selectorParts[0]}).children;\n                selectorParts = selectorParts.splice(1);\n                return this.get(selectorParts.join(':'), container);\n            }\n\n            return _.find(container, function (object) {\n                if (object && object.id === selector || (object.hasOwnProperty('data') && object.data.id == selector)) {\n                    return object;\n                }\n            });\n\n        },\n\n        /**\n         * Gets children based on selector and container\n         * @param {Array|string} selector\n         * @param {Array} container\n         * @returns {*|Array|HTMLElement[]}\n         */\n        query: function (selector, container) {\n\n            selector = parseSelector(selector);\n\n            if (!container) {\n                container = this.data;\n            }\n\n            var object = this.get(selector, container);\n\n            return object.children;\n\n        },\n\n        /**\n         * Set state (on/off)\n         * @param {Array|string} selector\n         * @param {boolean} value\n         */\n        setState: function (selector, value) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            if (object) {\n                object.on = value;\n                this.setVisible(selector, value);\n            }\n\n        },\n\n        /**\n         * Get state\n         * @param {Array|string} selector\n         * @returns {*}\n         */\n        getState: function (selector) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            if (object) {\n                return object.on;\n            }\n\n        },\n\n        /**\n         * Set visibility\n         * @param {Array|string} selector\n         * @param {boolean} value\n         */\n        setVisible: function (selector, value) {\n\n            selector = parseSelector(selector);\n\n            var self = this;\n\n            var object = this.get(selector);\n\n            if (object) {\n                object.visible = value;\n\n                if (object.children) {\n                    object.children.forEach(function (child) {\n                        if (child.id) {\n                            self.setVisible([selector, child.id], value)\n                        } else {\n                            var v = value ? object.on : false;\n                            map.setVisible(child, v);\n                        }\n                    })\n                }\n            }\n\n        },\n\n\n        /**\n         * Get visibility\n         * @param {Array|string} selector\n         * @returns {boolean}\n         */\n        getVisible: function (selector) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            var visible = true;\n\n            if (object) {\n                visible = object.visible;\n\n                if (hasParentSelector(selector)) {\n                    var parentSelector = getParentSelector(selector);\n                    var parentVisible = this.getVisible(parentSelector);\n                    if (parentVisible) {\n                        if (hasParentSelector(parentSelector)) {\n                            return this.getVisible(getParentSelector(parentSelector))\n                        }\n                    } else {\n                        return false;\n                    }\n                }\n\n            }\n\n            return visible;\n\n        },\n\n        /**\n         * Focus object based on selector\n         * @param {Array|string} selector\n         */\n        focus: function (selector, isFixedLayout) {\n\n            var self = this;\n\n            selector = parseSelector(selector);\n\n            var object = self.get(selector);\n\n            if (hasParentSelector(selector)) {\n\n                var parent = self.get(getParentSelector(selector));\n\n                self.setState(parent.id, true);\n\n                parent.children.forEach(function (child) {\n                    if (child.hasOwnProperty('id')) {\n                        self.setState([parent.id, child.id], child.id === object.id);\n                    }\n                });\n\n            }\n\n            map.focus(object && object.hasOwnProperty('children') ? object.children[0] : object, isFixedLayout);\n\n        },\n\n        getSelectors: function () {\n            return getSelectorsForContainer(storage.root());\n        }\n    };\n\n    /**\n     * Get parent selector\n     * @param {Array|string} selector\n     * @returns {string}\n     */\n    function getParentSelector(selector) {\n\n        selector = parseSelector(selector);\n\n        if (!hasParentSelector(selector)) {\n            return;\n        }\n\n        var selectorParts = selector.split(':');\n        selectorParts.splice(-1);\n\n        return selectorParts.join(':');\n    }\n\n    /**\n     * Test if parent selector is available\n     * @param {Array|string} selector\n     * @returns {boolean}\n     */\n    function hasParentSelector(selector) {\n\n        selector = parseSelector(selector);\n\n        return selector.indexOf(':') !== -1;\n    }\n\n    /**\n     * Parse array (if provided) into string\n     * @param {Array|string} selector\n     * @returns {*}\n     */\n    function parseSelector(selector) {\n\n        if (!selector) {\n            return;\n        }\n\n        if (typeof selector != 'string') {\n            selector = selector.join(':');\n        }\n\n        return selector.toLowerCase();\n\n    }\n\n    /**\n     *\n     * @param {Array} items\n     * @param {Array|string} selector\n     * @returns {Array}\n     */\n    function getSelectorsForContainer(items, selector) {\n\n        selector = parseSelector(selector);\n\n        var children = [];\n\n        items.forEach(function (item) {\n\n            if (!item.id) {\n                return;\n            }\n\n            var itemSelector;\n            if (selector) {\n                itemSelector = parseSelector([selector, item.id]);\n            } else {\n                itemSelector = item.id\n            }\n\n            var object = {\n                id: item.id,\n                getVisible: function () {\n                    return storage.getState(itemSelector);\n                },\n                setVisible: function (value) {\n                    return storage.setState(itemSelector, value);\n                },\n                select: function () {\n                    return storage.focus(itemSelector);\n                }\n            };\n\n            if (item.type) {\n                object.type = item.type;\n            }\n\n            if (item.children && item.children.length) {\n                var subChildren = getSelectorsForContainer(item.children, itemSelector);\n                if (subChildren && subChildren.length) {\n                    object.children = subChildren;\n                }\n            }\n\n            children.push(object)\n\n        });\n\n        return children;\n\n    }\n\n\n    return Storage;\n\n})();","'use strict';\n\nfruskac.Loader = (function () {\n\n    /**\n     * Loader\n     *\n     * @global\n     * @constructor\n     */\n    function Loader() {\n    }\n\n    /**\n     * @global\n     */\n    Loader.prototype = {\n\n\n        /**\n         * Load items\n         *\n         * @param {Array} items\n         */\n        load: function (items) {\n\n            var promises = [];\n\n            items.forEach(function (item) {\n                promises.push(load.apply(this, item));\n            });\n\n            return Promise.all(promises);\n\n        },\n\n        /**\n         * Append item to map\n         *\n         * @param url\n         * @param type\n         */\n        append: function (url, type) {\n            return map.add(url, type, true)\n        }\n\n    };\n\n    /**\n     * Initialize layers\n     *\n     * @param {string} url\n     * @param {string} name\n     * @param {string} type\n     * @param {boolean} visible\n     */\n    function load(url, name, type, visible) {\n\n        return storage.add({\n            id: name.toLowerCase(),\n            visible: visible,\n            on: visible\n        }).then(function () {\n            return $.get(url).success(function (response) { // get json array of items\n\n                var promises = [];\n\n                response.forEach(function (item) {\n                    var p, container = storage.get([name, item.tag]);\n\n                    if (container) {\n                        p = new Promise(function (resolve) {\n                            resolve();\n                        });\n                    } else {\n                        p = storage.add({\n                            id: item.tag.toLowerCase(),\n                            visible: visible,\n                            on: visible,\n                            type: type\n                        }, name);\n                    }\n\n                    p.then(function () {\n                        storage.add(item, [name.toLowerCase(), item.tag], type, visible);\n                    });\n\n                    promises.push(p);\n\n                });\n\n                return Promise.all(promises);\n\n            })\n        });\n    }\n\n    return Loader;\n\n})();","'use strict';\n\nfruskac.Api = (function () {\n\n    function Api(){}\n\n    Api.prototype = {\n\n        /**\n         * Fired when ready\n         * @global\n         * @param {Function} callback\n         */\n        ready: function (callback) {\n            callback();\n        },\n\n        /**\n         * Get data\n         * @global\n         * @returns {Object[]}\n         */\n        getData: function () {\n            return storage.getSelectors();\n        },\n\n        /**\n         * Get / Set clustering state\n         * @global\n         * @param {undefined|boolean} value\n         * @returns {*|boolean}\n         */\n        clustering: function (value) {\n            if (value === undefined) { // act as getter\n                return clusterer.enabled;\n            } else { // act as setter\n                clusterer.enabled = value;\n                if (value) {\n                    clusterer.setMaxZoom(null);\n                    clusterer.setGridSize(50);\n                } else {\n                    clusterer.setMaxZoom(1);\n                    clusterer.setGridSize(1);\n                }\n                clusterer.resetViewport();\n                clusterer.redraw();\n            }\n        },\n\n        /**\n         * Get / Set map type\n         * @global\n         * @param {undefined|string} value\n         * @returns {*}\n         */\n        type: function (value) {\n            if (value === undefined) { // act as getter\n                return gmap.getMapTypeId();\n            } else { // act as setter\n                return gmap.setMapTypeId(value);\n            }\n        }\n    };\n\n    return Api;\n\n})();","'use strict';\n\n// expose API\nwindow.fruskac = new fruskac.Api();\n\nvar util = new fruskac.Util();\n\nfruskac.isCrossDomain = window.self !== window.top && document.referrer && !(new RegExp('//' + document.domain)).test(document.referrer);\nfruskac.lang = util.getParameterByName('lang') || (window.self !== window.top && window.top.document.documentElement.lang) || CONFIG_LANG;\n\nvar i18n  = new fruskac.I18n(fruskac.lang);\n\nvar storage = new fruskac.Storage();\n\nvar mapConfig = {\n    center: new google.maps.LatLng(45.167031, 19.69677),\n    zoom: 11,\n    mapTypeId: google.maps.MapTypeId.TERRAIN,\n    mapTypeControl: false,\n    zoomControlOptions: {\n        position: google.maps.ControlPosition.LEFT_BOTTOM\n    },\n    streetViewControlOptions: {\n        position: google.maps.ControlPosition.LEFT_BOTTOM\n    }\n};\n\nvar latLngZoom = util.getParameterByName(PARAMETER_COORDINATES);\nif (latLngZoom) {\n    var parts = util.getParameterPartsByName(PARAMETER_COORDINATES);\n    if (parts && parts.length) {\n        if (parts[0] && parts[1]) {\n            mapConfig.center = new google.maps.LatLng(parts[0], parts[1]);\n        }\n        if (parts[2]) {\n            mapConfig.zoom = parseFloat(parts[2]);\n        }\n    }\n}\n\nvar gmap = new google.maps.Map(document.getElementById('map'), mapConfig);\n\nvar overlayImageBounds = {\n    north: 45.166508,\n    south: 45.136001,\n    east: 19.767672,\n    west: 19.681498\n};\nvar overlayOptions = {\n    opacity: 0.8,\n    clickable: false\n};\nvar groundOverlay = new google.maps.GroundOverlay(\n    'http://fruskac.net/sites/all/themes/fruskac/css/img/fruskac-logo-map.png',\n    overlayImageBounds,\n    overlayOptions\n);\ngroundOverlay.setMap(gmap);\n\nvar map = new fruskac.Map(gmap);\n\nvar clusterer = new MarkerClusterer(gmap, [], {\n    maxZoom: 12,\n    gridSize: 50,\n    styles: [\n        {\n            textColor: 'white',\n            url: 'http://fruskac.net/sites/all/themes/fruskac/css/img/maps.png',\n            backgroundPosition: '0 -523px',\n            height: 32,\n            width: 32\n        },\n        {\n            textColor: 'white',\n            url: 'http://fruskac.net/sites/all/themes/fruskac/css/img/maps.png',\n            backgroundPosition: '0 -443px',\n            height: 48,\n            width: 48\n        },\n        {\n            textColor: 'white',\n            url: 'http://fruskac.net/sites/all/themes/fruskac/css/img/maps.png',\n            backgroundPosition: '0 -379px',\n            height: 64,\n            width: 64\n        }\n    ]\n});\n\nclusterer.enabled = true;\n\nvar chart = new fruskac.Chart(document.getElementById('chart_container'));\n\n/*\n* URL param: \"l\" defines layers visible. If not defined, default visibility will be used\n*/\n\n// default layers and their visibility\nvar layers = CONFIG_LAYERS;\n\nvar activeLayers = [];\n\nvar layersFromUrl = util.getParameterPartsByName(PARAMETER_LAYERS);\n\nlayers.forEach(function (layer) {\n\n    if (layersFromUrl) { // if layer URL param exists, layers' visibility should follow\n        layer.visible = layersFromUrl.indexOf(layer.name) !== -1;\n    }\n\n    activeLayers.push(Object.values(layer));\n});\n\n\n/*\nLoad remote track\n */\n\nvar track = util.getParameterByName(PARAMETER_TRACK);\n\n/*\nLoad from \"activeLayers\"\n */\n\nvar loader = new fruskac.Loader();\n\nvar focus = util.getParameterByName(PARAMETER_FOCUS);\n\nloader.load(activeLayers).then(function () {\n\n    if (track) {\n        loader.append(track, TYPE_TRACK).then(function (object) {\n            google.maps.event.addListenerOnce(gmap, 'idle', function () { // wait for map to be loaded\n                map.focus(object); // focus on appended object\n            });\n        })\n    }\n\n    if (focus) {\n        google.maps.event.addListenerOnce(gmap, 'idle', function () { // wait for map to be loaded\n            storage.focus(focus, true); // focus on selected object\n        });\n    }\n});\n"]}