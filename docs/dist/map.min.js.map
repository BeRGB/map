{"version":3,"sources":["bootstrap.js","util.js","i18n.const.js","params.const.js","type.const.js","googleMaps.js","marker.js","track.js","kml.js","i18n.js","chart.js","map.js","storage.js","loader.js","api.js","init.js"],"names":["fruskac","prototype","Util","getParameterByName","name","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","getParameterPartsByName","value","this","split","I18N","LANGUAGES","SOURCE","DISTANCE","en","rs","ELEVATION","PARAMETER","FOCUS","COORDINATES","TRACK","LAYERS","TYPE","MARKER","KML","google","maps","Polyline","getBounds","bounds","LatLngBounds","getPath","forEach","item","extend","LatLng","lat","lng","Marker","options","_","map","gmap","icon","hasOwnProperty","MarkerImage","Size","width","height","Point","x","y","marker","event","addListener","showInfoWindow","getInfoWindowContent","data","html","title","description","image","link","Track","geodesic","strokeColor","strokeOpacity","strokeWeight","Kml","preserveViewport","suppressInfoWindows","type","KmlLayer","I18n","lang","Object","keys","key","add","id","values","source","translate","Chart","container","self","visible","getPathElevation","points","elevator","callback","gpath","point","push","getElevationAlongPath","path","samples","length","elevations","distance","rows","e","index","distanceFromPrevious","getDistance","parseFloat","elevation","p1","p2","R","dLat","rad","dLong","a","Math","sin","cos","c","atan2","sqrt","d","toFixed","PI","setVisible","className","$","addClass","removeClass","center","getCenter","trigger","setCenter","show","isFixedLayout","find","remove","ElevationService","charts","load","packages","language","setOnLoadCallback","visualization","DataTable","addColumn","i18n","addRows","lineWidth","focusTarget","hAxis","vAxis","minValue","legend","position","chart","AreaChart","document","getElementById","draw","events","coords","placeMarker","getAt","row","on","closeChart","Map","infoWindow","InfoWindow","content","isCrossDomain","frameElement","hasAttribute","getType","object","Promise","resolve","addMarker","then","addTrack","track","addKml","kml","icon_data","clusterer","get","response","each","i","v","Number","attr","lon","p","setMap","removeMarker","focus","setZoom","panTo","setAnimation","Animation","BOUNCE","fitBounds","animateTo","duration","setContent","open","fullscreen","params","getZoom","l","util","f","encodeURIComponent","join","Storage","getParentSelector","selector","parseSelector","hasParentSelector","selectorParts","splice","indexOf","getSelectorsForContainer","items","children","itemSelector","getVisible","storage","getState","setState","select","subChildren","root","query","child","parentSelector","parentVisible","parent","getSelectors","Loader","success","promises","tag","all","apply","append","Api","ready","getData","clustering","undefined","enabled","setMaxZoom","setGridSize","resetViewport","redraw","getMapTypeId","setMapTypeId","top","referrer","domain","test","documentElement","mapConfig","zoom","mapTypeId","MapTypeId","TERRAIN","mapTypeControl","zoomControlOptions","ControlPosition","LEFT_BOTTOM","streetViewControlOptions","latLngZoom","parts","overlayImageBounds","north","south","east","west","overlayOptions","opacity","clickable","groundOverlay","GroundOverlay","MarkerClusterer","maxZoom","gridSize","styles","textColor","backgroundPosition","layers","activeLayers","layersFromUrl","layer","loader","addListenerOnce"],"mappings":"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","file":"map.min.js","sourcesContent":["'use strict';\n\nfunction fruskac() {}\nfruskac.prototype = fruskac;\n","'use strict';\n\nfruskac.Util = (function () {\n\n    function Util() {}\n\n    Util.prototype = {\n        getParameterByName: function (name, url) {\n            if (!url) {\n                url = window.location.href;\n            }\n            name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n            var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n                results = regex.exec(url);\n            if (!results) return null;\n            if (!results[2]) return '';\n            return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n        },\n\n        getParameterPartsByName: function (name) {\n            var value = this.getParameterByName(name);\n            if (!value) {\n                return;\n            }\n            return value.split(',');\n        }\n\n    };\n\n    return Util;\n\n})();","'use strict';\n\nfruskac.I18N = {\n    LANGUAGES: [\n        'en',\n        'rs'\n    ],\n    SOURCE: {\n        DISTANCE: [\n            { en: 'Distance' },\n            { rs: 'Udaljenost' }\n        ],\n        ELEVATION: [\n            { en: 'Elevation' },\n            { rs: 'Visina' }\n        ]\n    }\n\n};\n\n","'use strict';\n\nfruskac.PARAMETER = {\n    FOCUS: 'f',\n    COORDINATES: 'c',\n    TRACK: 't',\n    LAYERS: 'l'\n};","'use strict';\n\nfruskac.TYPE = {\n    MARKER: 'marker',\n    TRACK: 'track',\n    KML: 'kml'\n};","'use strict';\n\n(function (google) {\n\n    /**\n     * Extend google.maps.Polyline to get bounds based on path\n     *\n     * @returns {google.maps.LatLngBounds}\n     */\n    google.maps.Polyline.prototype.getBounds = function () {\n        var bounds = new google.maps.LatLngBounds();\n        this.getPath().forEach(function (item) {\n            bounds.extend(new google.maps.LatLng(item.lat(), item.lng()));\n        });\n        return bounds;\n    };\n\n\n})(google);","'use strict';\n\nfruskac.Marker = (function () {\n\n    /**\n     * @global\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Marker(options) {\n\n        options = _.extend({\n            map: gmap\n        }, options);\n\n        if (options.icon && options.icon.hasOwnProperty('url')) {\n            options.icon = new google.maps.MarkerImage(\n                options.icon.url,\n                new google.maps.Size(options.icon.width, options.icon.height),\n                new google.maps.Point(options.icon.x, options.icon.y)\n            )\n        }\n\n        return (function () {\n\n            var marker = new google.maps.Marker(options);\n\n            google.maps.event.addListener(marker, 'click', function () {\n                map.showInfoWindow(getInfoWindowContent(options.data), this);\n            });\n\n            return marker;\n\n        })();\n    }\n\n    /**\n     * Creates HTML that will be presented on InfoWindow\n     *\n     * @param {Object} data\n     * @returns {string}\n     */\n    function getInfoWindowContent(data) {\n        var html = '<h1>' + data.title + '</h1>';\n        if (data.description) {\n            html += '<p>' + data.description + '</p>';\n        }\n        if (data.image) {\n            html += '<img src=\"' + data.image + '\">';\n        }\n        if (data.link) {\n            html += '<a href=\"' + data.link + '\" target=\"_blank\">' + data.link + '</a>';\n        }\n        return html;\n    }\n\n    return Marker;\n\n})();\n","'use strict';\n\nfruskac.Track = (function () {\n\n    /**\n     * Track\n     * @global\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Track(options) {\n\n        options = _.extend({\n            map: gmap,\n            geodesic: true,\n            strokeColor: 'rgb(51, 102, 204)',\n            strokeOpacity: 1.0,\n            strokeWeight: 4\n        }, options);\n\n        return (function () {\n            return new google.maps.Polyline(options)\n        })();\n    }\n\n    return Track;\n\n})();","'use strict';\n\nfruskac.Kml = (function () {\n\n    /**\n     * KML\n     * @global\n     * @param {string} url\n     * @param {Object|undefined} options\n     * @constructor\n     */\n    function Kml(url, options) {\n\n        options = _.extend({\n            map: gmap,\n            preserveViewport: true,\n            suppressInfoWindows: true,\n            data: {\n                type: 'kml'\n            }\n        }, options);\n\n        return (function () {\n            return new google.maps.KmlLayer(url, options)\n        })();\n    }\n\n    return Kml;\n\n})();","'use strict';\n\nfruskac.I18n = (function () {\n\n    var source = {};\n\n    function I18n(lang) {\n        this.lang = lang;\n        Object.keys(fruskac.I18N.SOURCE).forEach(function (key) {\n            add(key, fruskac.I18N.SOURCE[key])\n        })\n    }\n\n    I18n.prototype = {\n        translate: function (id) {\n            return source[this.lang] && source[this.lang][id] || '__TRANSLATION_MISSING__';\n        }\n    };\n\n    function add(id, values) {\n        values.forEach(function (value) {\n            fruskac.I18N.LANGUAGES.forEach(function (lang) {\n                if (value[lang]) {\n                    if (!source[lang]) {\n                        source[lang] = {};\n                    }\n                    source[lang][id] = value[lang];\n                }\n            })\n        });\n    }\n\n    return I18n;\n\n})();","'use strict';\n\nfruskac.Chart = (function () {\n\n    /**\n     * @global\n     * @param {HTMLDomElement} container\n     * @constructor\n     */\n    function Chart(container) {\n        var self = this;\n        self.visible = false;\n        self.container = container;\n    }\n\n    /**\n     * @global\n     */\n    Chart.prototype = {\n\n        /**\n         * Set chart container visibility\n         *\n         * @param {boolean} value\n         */\n        setVisible: function (value) {\n\n            var self = this;\n\n            self.visible = value;\n\n            var className = 'on';\n\n            if (self.visible) {\n                $(self.container).addClass(className);\n            } else {\n                $(self.container).removeClass(className);\n            }\n\n            var center = gmap.getCenter();\n            google.maps.event.trigger(gmap, \"resize\");\n            gmap.setCenter(center);\n\n        },\n\n        /**\n         * Show chart\n         *\n         * @param {Array} points\n         */\n        show: function (points, isFixedLayout) {\n\n            var self = this;\n\n            self.setVisible(true);\n\n            if (isFixedLayout) {\n                $(self.container).find('button').remove();\n            }\n\n            var elevator = new google.maps.ElevationService;\n\n            // Load the Visualization API and the corechart package.\n            google.charts.load('current', {\n                packages: ['corechart'],\n                language: fruskac.lang\n            });\n\n            // Set a callback to run when the Google Visualization API is loaded.\n            google.charts.setOnLoadCallback(function () {\n                getPathElevation(points, elevator, function (rows) {\n\n                    // Create the data table.\n                    var data = new google.visualization.DataTable();\n                    data.addColumn('number', i18n.translate('DISTANCE'));\n                    data.addColumn('number', i18n.translate('ELEVATION'));\n                    data.addRows(rows);\n\n                    // Set chart options\n                    var options = {\n                        lineWidth: 5,\n                        focusTarget: 'category',\n                        hAxis: {\n                            title: i18n.translate('DISTANCE') + ' (km)'\n                        },\n                        vAxis: {\n                            title: i18n.translate('ELEVATION') + ' (m)',\n                            minValue: 0\n                        },\n                        legend: {\n                            position: \"none\"\n                        }\n                    };\n\n                    // Instantiate and draw our chart, passing in some options.\n                    var chart = new google.visualization.AreaChart(document.getElementById('chart'));\n                    chart.draw(data, options);\n\n                    google.visualization.events.addListener(chart, 'onmouseover', function (coords) {\n                        map.placeMarker(points.getAt(coords.row))\n                    });\n\n                    $(window).on('resize', function () {\n                        chart.draw(data, options);\n                    });\n\n                });\n            });\n\n        }\n    };\n\n\n    /**\n     *\n     * @param {Object[]} points\n     * @param {google.maps.ElevationService} elevator\n     * @param {Function} callback\n     */\n    function getPathElevation(points, elevator, callback) {\n\n        var gpath = [];\n        points.forEach(function (point) {\n            gpath.push(point)\n        });\n\n        // Create a PathElevationRequest object using this array.\n        elevator.getElevationAlongPath({\n            'path': gpath,\n            'samples': gpath.length\n        }, function (elevations) {\n            var distance = 0;\n            var rows = [];\n            elevations.forEach(function (e, index) {\n                var distanceFromPrevious;\n                if (index) {\n                    distanceFromPrevious = getDistance(elevations[index].location, elevations[index - 1].location)\n                } else {\n                    distanceFromPrevious = 0;\n                }\n                distance += parseFloat(distanceFromPrevious);\n                rows.push([distance, e.elevation]);\n            });\n            callback(rows);\n        });\n    }\n\n    /**\n     * calculates distance between two points in km's\n     *\n     * @param {google.maps.LatLng} p1\n     * @param {google.maps.LatLng} p2\n     * @returns {string}\n     */\n    function getDistance(p1, p2) {\n        var R = 6378137; // Earth’s mean radius in meter\n        var dLat = rad(p2.lat() - p1.lat());\n        var dLong = rad(p2.lng() - p1.lng());\n        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *\n            Math.sin(dLong / 2) * Math.sin(dLong / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var d = R * c;\n        return (d / 1000).toFixed(2); // \"d\" returns the distance in meter\n        //return (google.maps.geometry.spherical.computeDistanceBetween(p1, p2) / 1000).toFixed(2);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    function rad(x) {\n        return x * Math.PI / 180;\n    }\n\n    window.closeChart = function () {\n        chart.setVisible(false);\n    };\n\n    return Chart;\n\n})();","'use strict';\n\nfruskac.Map = (function () {\n\n    /**\n     * Map\n     * @global\n     * @param {google.maps.Map} map\n     * @constructor\n     */\n    function Map(map) {\n\n        this.infoWindow = new google.maps.InfoWindow({\n            content: \"holding...\"\n        });\n\n        // show fullscreen button if CrossDomain or if \"allowfullscreen\" attribute added to iframe\n        if (fruskac.isCrossDomain || window.frameElement && window.frameElement.hasAttribute('allowFullScreen')) {\n            $('#map_container > button').show();\n        }\n\n    }\n\n    /**\n     * @global\n     */\n    Map.prototype = {\n\n        /**\n         * Add object to map\n         * @param {Object} data\n         * @param {string} type\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        add: function (data, type, visible) {\n\n            var self = this;\n\n            return new Promise(function (resolve) {\n                switch (type) {\n                    case fruskac.TYPE.MARKER:\n                        return self.addMarker(data, visible).then(function (marker) {\n                            resolve(marker);\n                        });\n                        break;\n                    case fruskac.TYPE.TRACK:\n                        return self.addTrack(data, visible).then(function (track) {\n                            resolve(track);\n                        });\n                        break;\n                    case fruskac.TYPE.KML:\n                        return self.addKml(data, visible).then(function (kml) {\n                            resolve(kml);\n                        });\n                        break;\n                }\n            });\n\n        },\n\n        /**\n         * Add marker to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addMarker: function (data, visible) {\n\n            return new Promise(function (resolve) {\n\n                var marker = new fruskac.Marker({\n                    position: new google.maps.LatLng(data.lat, data.lng),\n                    title: data.data.title,\n                    icon: data.options.icon_data,\n                    data: data.data\n                });\n\n                marker.setVisible(visible);\n\n                if (visible) {\n                    clusterer.addMarker(marker);\n                }\n\n                resolve(marker);\n\n            })\n\n        },\n\n        /**\n         * Add track to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addTrack: function (data, visible) {\n\n            var url;\n\n            if (typeof data === 'string') {\n                url = data;\n            } else {\n                url = '../' + data.url;\n            }\n\n            return new Promise(function (resolve) {\n\n                return $.get(url).then(function (response) {\n                    var points = [];\n                    $(response).find('trkpt').each(function (i, v) {\n                        var lat = Number($(this).attr('lat'));\n                        var lon = Number($(this).attr('lon'));\n                        var p = new google.maps.LatLng(lat, lon);\n                        points.push(p);\n                    });\n\n                    var track = new fruskac.Track({\n                        path: points\n                    });\n\n                    track.setVisible(visible);\n\n                    resolve(track);\n\n                });\n\n            });\n\n        },\n\n        /**\n         * Add KML layer to map\n         * @param {Object} data\n         * @param {boolean} visible\n         * @returns {Promise}\n         */\n        addKml: function (data, visible) {\n\n            return new Promise(function (resolve) {\n\n                var kml = new fruskac.Kml(data.url);\n\n                if (!visible) {\n                    kml.setMap(null);\n                }\n\n                resolve(kml);\n\n            })\n\n        },\n\n        /**\n         * Set visibility on object\n         * @param {Object} object\n         * @param {boolean} value\n         */\n        setVisible: function (object, value) {\n            switch (getType(object)) {\n                case fruskac.TYPE.MARKER:\n                    object.setVisible(value);\n                    if (value) {\n                        clusterer.addMarker(object);\n                    } else {\n                        clusterer.removeMarker(object);\n                    }\n                    break;\n                case fruskac.TYPE.TRACK:\n                    object.setVisible(value);\n                    break;\n                case fruskac.TYPE.KML:\n                    object.setMap(value ? gmap : null);\n                    break;\n            }\n        },\n\n        /**\n         * Focus one object on map, fit bounds\n         * @param {Object} object\n         */\n        focus: function (object, isFixedLayout) {\n            switch (getType(object)) {\n                case fruskac.TYPE.MARKER:\n                    gmap.setZoom(14);\n                    gmap.panTo(object.position);\n                    object.setAnimation(google.maps.Animation.BOUNCE);\n                    // TODO: show info window\n                    //map.showInfoWindow(getInfoWindowContent(options.data), this);\n                    break;\n                case fruskac.TYPE.TRACK:\n                    gmap.fitBounds(object.getBounds());\n                    chart.show(object.getPath(), isFixedLayout);\n                    break;\n            }\n        },\n\n        /**\n         * Place marker on map\n         * @param {google.maps.LatLng} point\n         */\n        placeMarker: function (point) {\n\n            var self = this;\n\n            if (!self.marker) {\n                self.marker = new fruskac.Marker({\n                    position: point\n                });\n            } else {\n                self.marker.animateTo(point, {\n                    duration: 50\n                });\n            }\n        },\n\n        /**\n         * Show info window for Marker\n         * @param {string} html\n         * @param {google.maps.Marker} marker\n         */\n        showInfoWindow: function (html, marker) {\n\n            var self = this;\n\n            self.infoWindow.setContent(html);\n            self.infoWindow.open(gmap, marker);\n\n        },\n\n        fullscreen: function () {\n\n            var params = {\n                c: gmap.getCenter().lat() + ',' + gmap.getCenter().lng() + ',' + gmap.getZoom(),\n                l: util.getParameterByName(fruskac.PARAMETER.LAYERS),\n                f: util.getParameterByName(fruskac.PARAMETER.FOCUS),\n                lang: fruskac.lang\n            };\n\n            var url = '/fruskac/map/examples/angularjs.html#!?' + Object.keys(params).map(function(i) {\n                    return params[i] && encodeURIComponent(i) + \"=\" + encodeURIComponent(params[i]);\n                }).join('&');\n\n            // TODO: update location when published\n            window.open(url, '_blank');\n        }\n    };\n\n    function getType(object) {\n        if (!object) {\n            return;\n        }\n        if (object.hasOwnProperty('position')) {//marker\n            return fruskac.TYPE.MARKER;\n        } else if (object.hasOwnProperty('strokeColor')) {\n            return fruskac.TYPE.TRACK;\n        } else if (object.hasOwnProperty('suppressInfoWindows')) {\n            return fruskac.TYPE.KML;\n        }\n    }\n\n    window.fullscreen = function () {\n        map.fullscreen()\n    };\n\n    return Map;\n\n})();","'use strict';\n\nfruskac.Storage = (function () {\n    /**\n     * @global\n     * @param {Array} Initial data array\n     * @constructor\n     */\n    function Storage(data) {\n        if (!data) {\n            data = [];\n        }\n        this.data = data;\n    }\n\n    /**\n     * @global\n     */\n    Storage.prototype = {\n\n        /**\n         * Add object to storage\n         * @param {Object} value\n         * @param {Array|string} selector\n         * @param {string} type\n         * @param {boolean} visible\n         * @returns {*}\n         */\n        add: function (value, selector, type, visible) {\n\n            var self = this;\n\n            selector = parseSelector(selector);\n\n            var container;\n\n            if (selector) {\n                var object = self.get(selector);\n                if (object) {\n                    if (!object.children) {\n                        object.children = [];\n                    }\n                    container = object.children;\n                }\n            } else {\n                container = self.data;\n            }\n\n            if (type) {\n                object.type = type;\n                return map.add(value, type, visible).then(function (object) {\n                    container.push(object);\n                });\n            } else {\n                return new Promise(function (resolve) {\n                    container.push(value);\n                    resolve(value);\n                })\n            }\n\n        },\n\n        /**\n         * Gets root data array\n         * @returns {*}\n         */\n        root: function () {\n            return this.data;\n        },\n\n        /**\n         * Gets object based on selector and container\n         * @param {Array|string} selector\n         * @param {Array} container\n         * @returns {*}\n         */\n        get: function (selector, container) {\n\n            selector = parseSelector(selector);\n\n            if (!container) {\n                container = this.data;\n            }\n\n            if (!selector) {\n                return;\n            }\n\n            if (selector.indexOf(':') !== -1) {\n                var selectorParts = selector.split(':');\n                var container = _.find(container, {id: selectorParts[0]}).children;\n                selectorParts = selectorParts.splice(1);\n                return this.get(selectorParts.join(':'), container);\n            }\n\n            return _.find(container, function (object) {\n                if (object && object.id === selector || (object.hasOwnProperty('data') && object.data.id == selector)) {\n                    return object;\n                }\n            });\n\n        },\n\n        /**\n         * Gets children based on selector and container\n         * @param {Array|string} selector\n         * @param {Array} container\n         * @returns {*|Array|HTMLElement[]}\n         */\n        query: function (selector, container) {\n\n            selector = parseSelector(selector);\n\n            if (!container) {\n                container = this.data;\n            }\n\n            var object = this.get(selector, container);\n\n            return object.children;\n\n        },\n\n        /**\n         * Set state (on/off)\n         * @param {Array|string} selector\n         * @param {boolean} value\n         */\n        setState: function (selector, value) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            if (object) {\n                object.on = value;\n                this.setVisible(selector, value);\n            }\n\n        },\n\n        /**\n         * Get state\n         * @param {Array|string} selector\n         * @returns {*}\n         */\n        getState: function (selector) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            if (object) {\n                return object.on;\n            }\n\n        },\n\n        /**\n         * Set visibility\n         * @param {Array|string} selector\n         * @param {boolean} value\n         */\n        setVisible: function (selector, value) {\n\n            selector = parseSelector(selector);\n\n            var self = this;\n\n            var object = this.get(selector);\n\n            if (object) {\n                object.visible = value;\n\n                if (object.children) {\n                    object.children.forEach(function (child) {\n                        if (child.id) {\n                            self.setVisible([selector, child.id], value)\n                        } else {\n                            var v = value ? object.on : false;\n                            map.setVisible(child, v);\n                        }\n                    })\n                }\n            }\n\n        },\n\n\n        /**\n         * Get visibility\n         * @param {Array|string} selector\n         * @returns {boolean}\n         */\n        getVisible: function (selector) {\n\n            selector = parseSelector(selector);\n\n            var object = this.get(selector);\n\n            var visible = true;\n\n            if (object) {\n                visible = object.visible;\n\n                if (hasParentSelector(selector)) {\n                    var parentSelector = getParentSelector(selector);\n                    var parentVisible = this.getVisible(parentSelector);\n                    if (parentVisible) {\n                        if (hasParentSelector(parentSelector)) {\n                            return this.getVisible(getParentSelector(parentSelector))\n                        }\n                    } else {\n                        return false;\n                    }\n                }\n\n            }\n\n            return visible;\n\n        },\n\n        /**\n         * Focus object based on selector\n         * @param {Array|string} selector\n         */\n        focus: function (selector, isFixedLayout) {\n\n            var self = this;\n\n            selector = parseSelector(selector);\n\n            var object = self.get(selector);\n\n            if (hasParentSelector(selector)) {\n\n                var parent = self.get(getParentSelector(selector));\n\n                self.setState(parent.id, true);\n\n                parent.children.forEach(function (child) {\n                    if (child.hasOwnProperty('id')) {\n                        self.setState([parent.id, child.id], child.id === object.id);\n                    }\n                });\n\n            }\n\n            map.focus(object && object.hasOwnProperty('children') ? object.children[0] : object, isFixedLayout);\n\n        },\n\n        getSelectors: function () {\n            return getSelectorsForContainer(storage.root());\n        }\n    };\n\n    /**\n     * Get parent selector\n     * @param {Array|string} selector\n     * @returns {string}\n     */\n    function getParentSelector(selector) {\n\n        selector = parseSelector(selector);\n\n        if (!hasParentSelector(selector)) {\n            return;\n        }\n\n        var selectorParts = selector.split(':');\n        selectorParts.splice(-1);\n\n        return selectorParts.join(':');\n    }\n\n    /**\n     * Test if parent selector is available\n     * @param {Array|string} selector\n     * @returns {boolean}\n     */\n    function hasParentSelector(selector) {\n\n        selector = parseSelector(selector);\n\n        return selector.indexOf(':') !== -1;\n    }\n\n    /**\n     * Parse array (if provided) into string\n     * @param {Array|string} selector\n     * @returns {*}\n     */\n    function parseSelector(selector) {\n        if (selector && typeof selector != 'string') {\n            selector = selector.join(':');\n        }\n\n        return selector;\n\n    }\n\n    /**\n     *\n     * @param {Array} items\n     * @param {Array|string} selector\n     * @returns {Array}\n     */\n    function getSelectorsForContainer(items, selector) {\n\n        selector = parseSelector(selector);\n\n        var children = [];\n\n        items.forEach(function (item) {\n\n            if (!item.id) {\n                return;\n            }\n\n            var itemSelector;\n            if (selector) {\n                itemSelector = parseSelector([selector, item.id]);\n            } else {\n                itemSelector = item.id\n            }\n\n            var object = {\n                id: item.id,\n                getVisible: function () {\n                    return storage.getState(itemSelector);\n                },\n                setVisible: function (value) {\n                    return storage.setState(itemSelector, value);\n                },\n                select: function () {\n                    return storage.focus(itemSelector);\n                }\n            };\n\n            if (item.type) {\n                object.type = item.type;\n            }\n\n            if (item.children && item.children.length) {\n                var subChildren = getSelectorsForContainer(item.children, itemSelector);\n                if (subChildren && subChildren.length) {\n                    object.children = subChildren;\n                }\n            }\n\n            children.push(object)\n\n        });\n\n        return children;\n\n    }\n\n\n    return Storage;\n\n})();","'use strict';\n\nfruskac.Loader = (function () {\n\n    /**\n     * Loader\n     *\n     * @global\n     * @constructor\n     */\n    function Loader() {\n    }\n\n    /**\n     * @global\n     */\n    Loader.prototype = {\n\n\n        /**\n         * Load items\n         *\n         * @param {Array} items\n         */\n        load: function (items) {\n\n            var promises = [];\n\n            items.forEach(function (item) {\n                promises.push(load.apply(this, item));\n            });\n\n            return Promise.all(promises);\n\n        },\n        \n        append: function (source, type) {\n            return map.add(source, type, true)\n        }\n\n    };\n\n    /**\n     * Initialize layers\n     *\n     * @param {string|Object} source\n     * @param {string} type\n     * @param {boolean} visible\n     */\n    function load(source, type, visible) {\n\n        if (typeof source === 'string') {\n            source = {\n                name: source.replace(/-\\w{2}/,''), // remove language suffix from name\n                url: '../data/' + source + '.json'\n            }\n        }\n\n        return storage.add({\n            id: source.name,\n            visible: visible,\n            on: visible\n        }).then(function () {\n            return $.get(source.url).success(function (response) { // get json array of items\n\n                var promises = [];\n\n                response.forEach(function (item) {\n                    var p, container = storage.get([source.name, item.tag]);\n\n                    if (container) {\n                        p = new Promise(function (resolve) {\n                            resolve();\n                        });\n                    } else {\n                        p = storage.add({\n                            id: item.tag,\n                            visible: visible,\n                            on: visible,\n                            type: type\n                        }, source.name);\n                    }\n\n                    p.then(function () {\n                        storage.add(item, [source.name, item.tag], type, visible);\n                    });\n\n                    promises.push(p);\n\n                });\n\n                return Promise.all(promises);\n\n            })\n        });\n    }\n\n    return Loader;\n\n})();","'use strict';\n\nfruskac.Api = (function () {\n\n    function Api(){}\n\n    Api.prototype = {\n\n        /**\n         * Fired when ready\n         * @global\n         * @param {Function} callback\n         */\n        ready: function (callback) {\n            callback();\n        },\n\n        /**\n         * Get data\n         * @global\n         * @returns {Object[]}\n         */\n        getData: function () {\n            return storage.getSelectors();\n        },\n\n        /**\n         * Get / Set clustering state\n         * @global\n         * @param {undefined|boolean} value\n         * @returns {*|boolean}\n         */\n        clustering: function (value) {\n            if (value === undefined) { // act as getter\n                return clusterer.enabled;\n            } else { // act as setter\n                clusterer.enabled = value;\n                if (value) {\n                    clusterer.setMaxZoom(null);\n                    clusterer.setGridSize(50);\n                } else {\n                    clusterer.setMaxZoom(1);\n                    clusterer.setGridSize(1);\n                }\n                clusterer.resetViewport();\n                clusterer.redraw();\n            }\n        },\n\n        /**\n         * Get / Set map type\n         * @global\n         * @param {undefined|string} value\n         * @returns {*}\n         */\n        type: function (value) {\n            if (value === undefined) { // act as getter\n                return gmap.getMapTypeId();\n            } else { // act as setter\n                return gmap.setMapTypeId(value);\n            }\n        }\n    };\n\n    return Api;\n\n})();","'use strict';\n\n// expose API\nwindow.fruskac = new fruskac.Api();\n\nvar util = new fruskac.Util();\n\nfruskac.isCrossDomain = window.self !== window.top && document.referrer && !(new RegExp('//' + document.domain)).test(document.referrer);\nfruskac.lang = util.getParameterByName('lang') || (window.self !== window.top && window.top.document.documentElement.lang) || 'en';\n\nvar i18n  = new fruskac.I18n(fruskac.lang);\n\nvar storage = new fruskac.Storage();\n\nvar mapConfig = {\n    center: new google.maps.LatLng(45.167031, 19.69677),\n    zoom: 11,\n    mapTypeId: google.maps.MapTypeId.TERRAIN,\n    mapTypeControl: false,\n    zoomControlOptions: {\n        position: google.maps.ControlPosition.LEFT_BOTTOM\n    },\n    streetViewControlOptions: {\n        position: google.maps.ControlPosition.LEFT_BOTTOM\n    }\n};\n\nvar latLngZoom = util.getParameterByName(fruskac.PARAMETER.COORDINATES);\nif (latLngZoom) {\n    var parts = util.getParameterPartsByName(fruskac.PARAMETER.COORDINATES);\n    if (parts && parts.length) {\n        if (parts[0] && parts[1]) {\n            mapConfig.center = new google.maps.LatLng(parts[0], parts[1]);\n        }\n        if (parts[2]) {\n            mapConfig.zoom = parseFloat(parts[2]);\n        }\n    }\n}\n\nvar gmap = new google.maps.Map(document.getElementById('map'), mapConfig);\n\nvar overlayImageBounds = {\n    north: 45.166508,\n    south: 45.136001,\n    east: 19.767672,\n    west: 19.681498\n};\nvar overlayOptions = {\n    opacity: 0.8,\n    clickable: false\n};\nvar groundOverlay = new google.maps.GroundOverlay(\n    'http://fruskac.net/sites/all/themes/fruskac/css/img/fruskac-logo-map.png',\n    overlayImageBounds,\n    overlayOptions\n);\ngroundOverlay.setMap(gmap);\n\nvar map = new fruskac.Map(gmap);\n\nvar clusterer = new MarkerClusterer(gmap, [], {\n    maxZoom: 12,\n    gridSize: 50,\n    styles: [\n        {\n            textColor: 'white',\n            url: 'http://fruskac.net/sites/all/themes/fruskac/css/img/maps.png',\n            backgroundPosition: '0 -523px',\n            height: 32,\n            width: 32\n        },\n        {\n            textColor: 'white',\n            url: 'http://fruskac.net/sites/all/themes/fruskac/css/img/maps.png',\n            backgroundPosition: '0 -443px',\n            height: 48,\n            width: 48\n        },\n        {\n            textColor: 'white',\n            url: 'http://fruskac.net/sites/all/themes/fruskac/css/img/maps.png',\n            backgroundPosition: '0 -379px',\n            height: 64,\n            width: 64\n        }\n    ]\n});\n\nclusterer.enabled = true;\n\nvar chart = new fruskac.Chart(document.getElementById('chart_container'));\n\n/*\n* URL param: \"l\" defines layers visible. If not defined, default visibility will be used\n*/\n\n// default layers and their visibility\nvar layers = [\n    {\n        source: 'locations-' + fruskac.lang,\n        type: fruskac.TYPE.MARKER,\n        visible: true\n    },\n    {\n        source: 'marathon',\n        type: fruskac.TYPE.TRACK,\n        visible: false\n    },\n    {\n        source: 'protection',\n        type: fruskac.TYPE.KML,\n        visible: false\n    },\n    {\n        source: 'time',\n        type: fruskac.TYPE.MARKER,\n        visible: false\n    }\n];\n\nvar activeLayers = [];\n\nvar layersFromUrl = util.getParameterPartsByName(fruskac.PARAMETER.LAYERS);\n\nlayers.forEach(function (layer) {\n\n    if (layersFromUrl) { // if layer URL param exists, layers' visibility should follow\n        layer.visible = layersFromUrl.indexOf(layer.name) !== -1;\n    }\n\n    activeLayers.push(Object.values(layer));\n});\n\n\n/*\nLoad remote track\n */\n\nvar track = util.getParameterByName(fruskac.PARAMETER.TRACK);\n\n/*\nLoad from \"activeLayers\"\n */\n\nvar loader = new fruskac.Loader();\n\nvar focus = util.getParameterByName(fruskac.PARAMETER.FOCUS);\n\nloader.load(activeLayers).then(function () {\n\n    if (track) {\n        loader.append(track, fruskac.TYPE.TRACK).then(function (object) {\n            google.maps.event.addListenerOnce(gmap, 'idle', function () { // wait for map to be loaded\n                map.focus(object); // focus on appended object\n            });\n        })\n    }\n\n    if (focus) {\n        google.maps.event.addListenerOnce(gmap, 'idle', function () { // wait for map to be loaded\n            storage.focus(focus, true); // focus on selected object\n        });\n    }\n});\n"]}